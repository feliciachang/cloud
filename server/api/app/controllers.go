// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application Controllers
//
// Command:
// $ main

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
	"regexp"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ExportController is the controller interface for the Export actions.
type ExportController interface {
	goa.Muxer
	ListBySource(*ListBySourceExportContext) error
}

// MountExportController "mounts" a Export resource controller on the given service.
func MountExportController(service *goa.Service, ctrl ExportController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/sources/:sourceId/csv", ctrl.MuxHandler("preflight", handleExportOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBySourceExportContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBySource(rctx)
	}
	h = handleExportOrigin(h)
	service.Mux.Handle("GET", "/sources/:sourceId/csv", ctrl.MuxHandler("list by source", h, nil))
	service.LogInfo("mount", "ctrl", "Export", "action", "ListBySource", "route", "GET /sources/:sourceId/csv")
}

// handleExportOrigin applies the CORS response headers corresponding to the origin.
func handleExportOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// FirmwareController is the controller interface for the Firmware actions.
type FirmwareController interface {
	goa.Muxer
	Add(*AddFirmwareContext) error
	Check(*CheckFirmwareContext) error
	List(*ListFirmwareContext) error
	ListDevice(*ListDeviceFirmwareContext) error
	Update(*UpdateFirmwareContext) error
}

// MountFirmwareController "mounts" a Firmware resource controller on the given service.
func MountFirmwareController(service *goa.Service, ctrl FirmwareController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/firmware", ctrl.MuxHandler("preflight", handleFirmwareOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/devices/:deviceId/:module/firmware", ctrl.MuxHandler("preflight", handleFirmwareOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/devices/:deviceId/firmware", ctrl.MuxHandler("preflight", handleFirmwareOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/devices/firmware", ctrl.MuxHandler("preflight", handleFirmwareOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddFirmwarePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("PATCH", "/firmware", ctrl.MuxHandler("add", h, unmarshalAddFirmwarePayload))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "Add", "route", "PATCH /firmware")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCheckFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Check(rctx)
	}
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("GET", "/devices/:deviceId/:module/firmware", ctrl.MuxHandler("check", h, nil))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "Check", "route", "GET /devices/:deviceId/:module/firmware")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("GET", "/firmware", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "List", "route", "GET /firmware")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListDeviceFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListDevice(rctx)
	}
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("GET", "/devices/:deviceId/firmware", ctrl.MuxHandler("list device", h, nil))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "ListDevice", "route", "GET /devices/:deviceId/firmware")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateFirmwareContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateDeviceFirmwarePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleFirmwareOrigin(h)
	service.Mux.Handle("PATCH", "/devices/firmware", ctrl.MuxHandler("update", h, unmarshalUpdateFirmwarePayload))
	service.LogInfo("mount", "ctrl", "Firmware", "action", "Update", "route", "PATCH /devices/firmware")
}

// handleFirmwareOrigin applies the CORS response headers corresponding to the origin.
func handleFirmwareOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddFirmwarePayload unmarshals the request body into the context request data Payload field.
func unmarshalAddFirmwarePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addFirmwarePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateFirmwarePayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateFirmwarePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateDeviceFirmwarePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// GeoJSONController is the controller interface for the GeoJSON actions.
type GeoJSONController interface {
	goa.Muxer
	GeographicalQuery(*GeographicalQueryGeoJSONContext) error
	ListByID(*ListByIDGeoJSONContext) error
	ListBySource(*ListBySourceGeoJSONContext) error
}

// MountGeoJSONController "mounts" a GeoJSON resource controller on the given service.
func MountGeoJSONController(service *goa.Service, ctrl GeoJSONController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/features", ctrl.MuxHandler("preflight", handleGeoJSONOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/features/:featureId/geojson", ctrl.MuxHandler("preflight", handleGeoJSONOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/sources/:sourceId/geojson", ctrl.MuxHandler("preflight", handleGeoJSONOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGeographicalQueryGeoJSONContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GeographicalQuery(rctx)
	}
	h = handleGeoJSONOrigin(h)
	service.Mux.Handle("GET", "/features", ctrl.MuxHandler("geographical query", h, nil))
	service.LogInfo("mount", "ctrl", "GeoJSON", "action", "GeographicalQuery", "route", "GET /features")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListByIDGeoJSONContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListByID(rctx)
	}
	h = handleGeoJSONOrigin(h)
	service.Mux.Handle("GET", "/features/:featureId/geojson", ctrl.MuxHandler("list by id", h, nil))
	service.LogInfo("mount", "ctrl", "GeoJSON", "action", "ListByID", "route", "GET /features/:featureId/geojson")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBySourceGeoJSONContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBySource(rctx)
	}
	h = handleGeoJSONOrigin(h)
	service.Mux.Handle("GET", "/sources/:sourceId/geojson", ctrl.MuxHandler("list by source", h, nil))
	service.LogInfo("mount", "ctrl", "GeoJSON", "action", "ListBySource", "route", "GET /sources/:sourceId/geojson")
}

// handleGeoJSONOrigin applies the CORS response headers corresponding to the origin.
func handleGeoJSONOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// QueryController is the controller interface for the Query actions.
type QueryController interface {
	goa.Muxer
	ListBySource(*ListBySourceQueryContext) error
}

// MountQueryController "mounts" a Query resource controller on the given service.
func MountQueryController(service *goa.Service, ctrl QueryController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/sources/:sourceId/query", ctrl.MuxHandler("preflight", handleQueryOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBySourceQueryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBySource(rctx)
	}
	h = handleQueryOrigin(h)
	service.Mux.Handle("GET", "/sources/:sourceId/query", ctrl.MuxHandler("list by source", h, nil))
	service.LogInfo("mount", "ctrl", "Query", "action", "ListBySource", "route", "GET /sources/:sourceId/query")
}

// handleQueryOrigin applies the CORS response headers corresponding to the origin.
func handleQueryOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// TasksController is the controller interface for the Tasks actions.
type TasksController interface {
	goa.Muxer
	Check(*CheckTasksContext) error
	Five(*FiveTasksContext) error
	Refresh(*RefreshTasksContext) error
}

// MountTasksController "mounts" a Tasks resource controller on the given service.
func MountTasksController(service *goa.Service, ctrl TasksController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/tasks/check", ctrl.MuxHandler("preflight", handleTasksOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/tasks/five", ctrl.MuxHandler("preflight", handleTasksOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/tasks/refresh/:deviceId/:fileTypeId", ctrl.MuxHandler("preflight", handleTasksOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCheckTasksContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Check(rctx)
	}
	h = handleTasksOrigin(h)
	service.Mux.Handle("GET", "/tasks/check", ctrl.MuxHandler("check", h, nil))
	service.LogInfo("mount", "ctrl", "Tasks", "action", "Check", "route", "GET /tasks/check")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewFiveTasksContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Five(rctx)
	}
	h = handleTasksOrigin(h)
	service.Mux.Handle("GET", "/tasks/five", ctrl.MuxHandler("five", h, nil))
	service.LogInfo("mount", "ctrl", "Tasks", "action", "Five", "route", "GET /tasks/five")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRefreshTasksContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Refresh(rctx)
	}
	h = handleTasksOrigin(h)
	service.Mux.Handle("GET", "/tasks/refresh/:deviceId/:fileTypeId", ctrl.MuxHandler("refresh", h, nil))
	service.LogInfo("mount", "ctrl", "Tasks", "action", "Refresh", "route", "GET /tasks/refresh/:deviceId/:fileTypeId")
}

// handleTasksOrigin applies the CORS response headers corresponding to the origin.
func handleTasksOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// AdministratorController is the controller interface for the Administrator actions.
type AdministratorController interface {
	goa.Muxer
	Add(*AddAdministratorContext) error
	Delete(*DeleteAdministratorContext) error
	Get(*GetAdministratorContext) error
	GetID(*GetIDAdministratorContext) error
	List(*ListAdministratorContext) error
	ListID(*ListIDAdministratorContext) error
}

// MountAdministratorController "mounts" a Administrator resource controller on the given service.
func MountAdministratorController(service *goa.Service, ctrl AdministratorController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects/:projectId/administrators", ctrl.MuxHandler("preflight", handleAdministratorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/:projectId/administrators/:userId", ctrl.MuxHandler("preflight", handleAdministratorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/administrators/@/:email", ctrl.MuxHandler("preflight", handleAdministratorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/administrators", ctrl.MuxHandler("preflight", handleAdministratorOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddAdministratorPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("POST", "/projects/:projectId/administrators", ctrl.MuxHandler("add", h, unmarshalAddAdministratorPayload))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "Add", "route", "POST /projects/:projectId/administrators", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("DELETE", "/projects/:projectId/administrators/:userId", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "Delete", "route", "DELETE /projects/:projectId/administrators/:userId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/administrators/@/:email", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "Get", "route", "GET /projects/@/:project/administrators/@/:email", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("GET", "/projects/:projectId/administrators/:userId", ctrl.MuxHandler("get id", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "GetID", "route", "GET /projects/:projectId/administrators/:userId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/administrators", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "List", "route", "GET /projects/@/:project/administrators", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDAdministratorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleAdministratorOrigin(h)
	service.Mux.Handle("GET", "/projects/:projectId/administrators", ctrl.MuxHandler("list id", h, nil))
	service.LogInfo("mount", "ctrl", "Administrator", "action", "ListID", "route", "GET /projects/:projectId/administrators", "security", "jwt")
}

// handleAdministratorOrigin applies the CORS response headers corresponding to the origin.
func handleAdministratorOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddAdministratorPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddAdministratorPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addAdministratorPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// DeviceController is the controller interface for the Device actions.
type DeviceController interface {
	goa.Muxer
	Add(*AddDeviceContext) error
	GetID(*GetIDDeviceContext) error
	List(*ListDeviceContext) error
	Update(*UpdateDeviceContext) error
	UpdateLocation(*UpdateLocationDeviceContext) error
	UpdateSchema(*UpdateSchemaDeviceContext) error
}

// MountDeviceController "mounts" a Device resource controller on the given service.
func MountDeviceController(service *goa.Service, ctrl DeviceController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expeditionId/sources/devices", ctrl.MuxHandler("preflight", handleDeviceOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/sources/devices/:id", ctrl.MuxHandler("preflight", handleDeviceOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/sources/devices", ctrl.MuxHandler("preflight", handleDeviceOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/sources/devices/:id/location", ctrl.MuxHandler("preflight", handleDeviceOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/sources/devices/:id/schemas", ctrl.MuxHandler("preflight", handleDeviceOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddDeviceContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddDeviceSourcePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleDeviceOrigin(h)
	service.Mux.Handle("POST", "/expeditions/:expeditionId/sources/devices", ctrl.MuxHandler("add", h, unmarshalAddDevicePayload))
	service.LogInfo("mount", "ctrl", "Device", "action", "Add", "route", "POST /expeditions/:expeditionId/sources/devices", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDDeviceContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleDeviceOrigin(h)
	service.Mux.Handle("GET", "/sources/devices/:id", ctrl.MuxHandler("get id", h, nil))
	service.LogInfo("mount", "ctrl", "Device", "action", "GetID", "route", "GET /sources/devices/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListDeviceContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleDeviceOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/sources/devices", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Device", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/sources/devices", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateDeviceContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateDeviceSourcePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleDeviceOrigin(h)
	service.Mux.Handle("PATCH", "/sources/devices/:id", ctrl.MuxHandler("update", h, unmarshalUpdateDevicePayload))
	service.LogInfo("mount", "ctrl", "Device", "action", "Update", "route", "PATCH /sources/devices/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateLocationDeviceContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateDeviceSourceLocationPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateLocation(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleDeviceOrigin(h)
	service.Mux.Handle("PATCH", "/sources/devices/:id/location", ctrl.MuxHandler("update location", h, unmarshalUpdateLocationDevicePayload))
	service.LogInfo("mount", "ctrl", "Device", "action", "UpdateLocation", "route", "PATCH /sources/devices/:id/location", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateSchemaDeviceContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateDeviceSourceSchemaPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateSchema(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleDeviceOrigin(h)
	service.Mux.Handle("PATCH", "/sources/devices/:id/schemas", ctrl.MuxHandler("update schema", h, unmarshalUpdateSchemaDevicePayload))
	service.LogInfo("mount", "ctrl", "Device", "action", "UpdateSchema", "route", "PATCH /sources/devices/:id/schemas", "security", "jwt")
}

// handleDeviceOrigin applies the CORS response headers corresponding to the origin.
func handleDeviceOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddDevicePayload unmarshals the request body into the context request data Payload field.
func unmarshalAddDevicePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addDeviceSourcePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateDevicePayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateDevicePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateDeviceSourcePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateLocationDevicePayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateLocationDevicePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateDeviceSourceLocationPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateSchemaDevicePayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateSchemaDevicePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateDeviceSourceSchemaPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// DeviceDataController is the controller interface for the DeviceData actions.
type DeviceDataController interface {
	goa.Muxer
	All(*AllDeviceDataContext) error
}

// MountDeviceDataController "mounts" a DeviceData resource controller on the given service.
func MountDeviceDataController(service *goa.Service, ctrl DeviceDataController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/devices/:deviceId/data", ctrl.MuxHandler("preflight", handleDeviceDataOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAllDeviceDataContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.All(rctx)
	}
	h = handleDeviceDataOrigin(h)
	service.Mux.Handle("GET", "/devices/:deviceId/data", ctrl.MuxHandler("all", h, nil))
	service.LogInfo("mount", "ctrl", "DeviceData", "action", "All", "route", "GET /devices/:deviceId/data")
}

// handleDeviceDataOrigin applies the CORS response headers corresponding to the origin.
func handleDeviceDataOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// DeviceLogsController is the controller interface for the DeviceLogs actions.
type DeviceLogsController interface {
	goa.Muxer
	All(*AllDeviceLogsContext) error
}

// MountDeviceLogsController "mounts" a DeviceLogs resource controller on the given service.
func MountDeviceLogsController(service *goa.Service, ctrl DeviceLogsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/devices/:deviceId/logs", ctrl.MuxHandler("preflight", handleDeviceLogsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAllDeviceLogsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.All(rctx)
	}
	h = handleDeviceLogsOrigin(h)
	service.Mux.Handle("GET", "/devices/:deviceId/logs", ctrl.MuxHandler("all", h, nil))
	service.LogInfo("mount", "ctrl", "DeviceLogs", "action", "All", "route", "GET /devices/:deviceId/logs")
}

// handleDeviceLogsOrigin applies the CORS response headers corresponding to the origin.
func handleDeviceLogsOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// ExpeditionController is the controller interface for the Expedition actions.
type ExpeditionController interface {
	goa.Muxer
	Add(*AddExpeditionContext) error
	Get(*GetExpeditionContext) error
	GetID(*GetIDExpeditionContext) error
	List(*ListExpeditionContext) error
	ListID(*ListIDExpeditionContext) error
	Update(*UpdateExpeditionContext) error
}

// MountExpeditionController "mounts" a Expedition resource controller on the given service.
func MountExpeditionController(service *goa.Service, ctrl ExpeditionController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects/:projectId/expeditions", ctrl.MuxHandler("preflight", handleExpeditionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition", ctrl.MuxHandler("preflight", handleExpeditionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/expeditions/:expeditionId", ctrl.MuxHandler("preflight", handleExpeditionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions", ctrl.MuxHandler("preflight", handleExpeditionOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddExpeditionPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("POST", "/projects/:projectId/expeditions", ctrl.MuxHandler("add", h, unmarshalAddExpeditionPayload))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "Add", "route", "POST /projects/:projectId/expeditions", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "Get", "route", "GET /projects/@/:project/expeditions/@/:expedition")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expeditionId", ctrl.MuxHandler("get id", h, nil))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "GetID", "route", "GET /expeditions/:expeditionId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "List", "route", "GET /projects/@/:project/expeditions")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("GET", "/projects/:projectId/expeditions", ctrl.MuxHandler("list id", h, nil))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "ListID", "route", "GET /projects/:projectId/expeditions", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateExpeditionContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddExpeditionPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleExpeditionOrigin(h)
	service.Mux.Handle("PATCH", "/expeditions/:expeditionId", ctrl.MuxHandler("update", h, unmarshalUpdateExpeditionPayload))
	service.LogInfo("mount", "ctrl", "Expedition", "action", "Update", "route", "PATCH /expeditions/:expeditionId", "security", "jwt")
}

// handleExpeditionOrigin applies the CORS response headers corresponding to the origin.
func handleExpeditionOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddExpeditionPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddExpeditionPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addExpeditionPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateExpeditionPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateExpeditionPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addExpeditionPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// FilesController is the controller interface for the Files actions.
type FilesController interface {
	goa.Muxer
	Csv(*CsvFilesContext) error
	DeviceInfo(*DeviceInfoFilesContext) error
	File(*FileFilesContext) error
	GetDeviceLocationHistory(*GetDeviceLocationHistoryFilesContext) error
	ListDeviceDataFiles(*ListDeviceDataFilesFilesContext) error
	ListDeviceLogFiles(*ListDeviceLogFilesFilesContext) error
	ListDevices(*ListDevicesFilesContext) error
	Raw(*RawFilesContext) error
	Status(*StatusFilesContext) error
	UpdateDeviceInfo(*UpdateDeviceInfoFilesContext) error
}

// MountFilesController "mounts" a Files resource controller on the given service.
func MountFilesController(service *goa.Service, ctrl FilesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/files/:fileId/data.csv", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/devices/:deviceId", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/files/:fileId", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/devices/:deviceId/locations", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/devices/:deviceId/files/data", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/devices/:deviceId/files/logs", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/files/devices", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/files/:fileId/data.fkpb", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/files/status", ctrl.MuxHandler("preflight", handleFilesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCsvFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Csv(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/files/:fileId/data.csv", ctrl.MuxHandler("csv", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "Csv", "route", "GET /files/:fileId/data.csv")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeviceInfoFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeviceInfo(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/devices/:deviceId", ctrl.MuxHandler("device info", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "DeviceInfo", "route", "GET /devices/:deviceId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewFileFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.File(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/files/:fileId", ctrl.MuxHandler("file", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "File", "route", "GET /files/:fileId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetDeviceLocationHistoryFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetDeviceLocationHistory(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/devices/:deviceId/locations", ctrl.MuxHandler("get device location history", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "GetDeviceLocationHistory", "route", "GET /devices/:deviceId/locations")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListDeviceDataFilesFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListDeviceDataFiles(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/devices/:deviceId/files/data", ctrl.MuxHandler("list device data files", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "ListDeviceDataFiles", "route", "GET /devices/:deviceId/files/data")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListDeviceLogFilesFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListDeviceLogFiles(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/devices/:deviceId/files/logs", ctrl.MuxHandler("list device log files", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "ListDeviceLogFiles", "route", "GET /devices/:deviceId/files/logs")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListDevicesFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListDevices(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/files/devices", ctrl.MuxHandler("list devices", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "ListDevices", "route", "GET /files/devices")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRawFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Raw(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/files/:fileId/data.fkpb", ctrl.MuxHandler("raw", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "Raw", "route", "GET /files/:fileId/data.fkpb")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStatusFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Status(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("GET", "/files/status", ctrl.MuxHandler("status", h, nil))
	service.LogInfo("mount", "ctrl", "Files", "action", "Status", "route", "GET /files/status")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateDeviceInfoFilesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateDeviceInfoPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateDeviceInfo(rctx)
	}
	h = handleFilesOrigin(h)
	service.Mux.Handle("POST", "/devices/:deviceId", ctrl.MuxHandler("update device info", h, unmarshalUpdateDeviceInfoFilesPayload))
	service.LogInfo("mount", "ctrl", "Files", "action", "UpdateDeviceInfo", "route", "POST /devices/:deviceId")
}

// handleFilesOrigin applies the CORS response headers corresponding to the origin.
func handleFilesOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalUpdateDeviceInfoFilesPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateDeviceInfoFilesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateDeviceInfoPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// MemberController is the controller interface for the Member actions.
type MemberController interface {
	goa.Muxer
	Add(*AddMemberContext) error
	Delete(*DeleteMemberContext) error
	Get(*GetMemberContext) error
	GetID(*GetIDMemberContext) error
	List(*ListMemberContext) error
	ListID(*ListIDMemberContext) error
	Update(*UpdateMemberContext) error
}

// MountMemberController "mounts" a Member resource controller on the given service.
func MountMemberController(service *goa.Service, ctrl MemberController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/teams/:teamId/members", ctrl.MuxHandler("preflight", handleMemberOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/teams/:teamId/members/:userId", ctrl.MuxHandler("preflight", handleMemberOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team/members/@/:email", ctrl.MuxHandler("preflight", handleMemberOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team/members", ctrl.MuxHandler("preflight", handleMemberOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddMemberPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("POST", "/teams/:teamId/members", ctrl.MuxHandler("add", h, unmarshalAddMemberPayload))
	service.LogInfo("mount", "ctrl", "Member", "action", "Add", "route", "POST /teams/:teamId/members", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("DELETE", "/teams/:teamId/members/:userId", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "Delete", "route", "DELETE /teams/:teamId/members/:userId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team/members/@/:email", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "Get", "route", "GET /projects/@/:project/expeditions/@/:expedition/teams/@/:team/members/@/:email", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("GET", "/teams/:teamId/members/:userId", ctrl.MuxHandler("get id", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "GetID", "route", "GET /teams/:teamId/members/:userId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team/members", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/teams/@/:team/members", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("GET", "/teams/:teamId/members", ctrl.MuxHandler("list id", h, nil))
	service.LogInfo("mount", "ctrl", "Member", "action", "ListID", "route", "GET /teams/:teamId/members", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateMemberContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateMemberPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleMemberOrigin(h)
	service.Mux.Handle("PATCH", "/teams/:teamId/members/:userId", ctrl.MuxHandler("update", h, unmarshalUpdateMemberPayload))
	service.LogInfo("mount", "ctrl", "Member", "action", "Update", "route", "PATCH /teams/:teamId/members/:userId", "security", "jwt")
}

// handleMemberOrigin applies the CORS response headers corresponding to the origin.
func handleMemberOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddMemberPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddMemberPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addMemberPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateMemberPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateMemberPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateMemberPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PictureController is the controller interface for the Picture actions.
type PictureController interface {
	goa.Muxer
	ExpeditionGetID(*ExpeditionGetIDPictureContext) error
	ProjectGetID(*ProjectGetIDPictureContext) error
	UserGetID(*UserGetIDPictureContext) error
}

// MountPictureController "mounts" a Picture resource controller on the given service.
func MountPictureController(service *goa.Service, ctrl PictureController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expeditionId/picture", ctrl.MuxHandler("preflight", handlePictureOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/:projectId/picture", ctrl.MuxHandler("preflight", handlePictureOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/:userId/picture", ctrl.MuxHandler("preflight", handlePictureOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewExpeditionGetIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ExpeditionGetID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expeditionId/picture", ctrl.MuxHandler("expedition get id", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "ExpeditionGetID", "route", "GET /expeditions/:expeditionId/picture")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewProjectGetIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ProjectGetID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("GET", "/projects/:projectId/picture", ctrl.MuxHandler("project get id", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "ProjectGetID", "route", "GET /projects/:projectId/picture")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUserGetIDPictureContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.UserGetID(rctx)
	}
	h = handlePictureOrigin(h)
	service.Mux.Handle("GET", "/users/:userId/picture", ctrl.MuxHandler("user get id", h, nil))
	service.LogInfo("mount", "ctrl", "Picture", "action", "UserGetID", "route", "GET /users/:userId/picture")
}

// handlePictureOrigin applies the CORS response headers corresponding to the origin.
func handlePictureOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// ProjectController is the controller interface for the Project actions.
type ProjectController interface {
	goa.Muxer
	Add(*AddProjectContext) error
	Get(*GetProjectContext) error
	GetID(*GetIDProjectContext) error
	List(*ListProjectContext) error
	ListCurrent(*ListCurrentProjectContext) error
	Update(*UpdateProjectContext) error
}

// MountProjectController "mounts" a Project resource controller on the given service.
func MountProjectController(service *goa.Service, ctrl ProjectController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects", ctrl.MuxHandler("preflight", handleProjectOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project", ctrl.MuxHandler("preflight", handleProjectOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/:projectId", ctrl.MuxHandler("preflight", handleProjectOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/user/projects", ctrl.MuxHandler("preflight", handleProjectOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddProjectPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("POST", "/projects", ctrl.MuxHandler("add", h, unmarshalAddProjectPayload))
	service.LogInfo("mount", "ctrl", "Project", "action", "Add", "route", "POST /projects", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleProjectOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "Get", "route", "GET /projects/@/:project")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("GET", "/projects/:projectId", ctrl.MuxHandler("get id", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "GetID", "route", "GET /projects/:projectId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("GET", "/projects", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "List", "route", "GET /projects", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCurrentProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCurrent(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("GET", "/user/projects", ctrl.MuxHandler("list current", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "ListCurrent", "route", "GET /user/projects", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddProjectPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleProjectOrigin(h)
	service.Mux.Handle("PATCH", "/projects/:projectId", ctrl.MuxHandler("update", h, unmarshalUpdateProjectPayload))
	service.LogInfo("mount", "ctrl", "Project", "action", "Update", "route", "PATCH /projects/:projectId", "security", "jwt")
}

// handleProjectOrigin applies the CORS response headers corresponding to the origin.
func handleProjectOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddProjectPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddProjectPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addProjectPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateProjectPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateProjectPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addProjectPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SimpleController is the controller interface for the Simple actions.
type SimpleController interface {
	goa.Muxer
	Download(*DownloadSimpleContext) error
	MyFeatures(*MyFeaturesSimpleContext) error
	MySimpleSummary(*MySimpleSummarySimpleContext) error
}

// MountSimpleController "mounts" a Simple resource controller on the given service.
func MountSimpleController(service *goa.Service, ctrl SimpleController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/my/simple/download", ctrl.MuxHandler("preflight", handleSimpleOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/my/simple/features", ctrl.MuxHandler("preflight", handleSimpleOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/my/simple", ctrl.MuxHandler("preflight", handleSimpleOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDownloadSimpleContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Download(rctx)
	}
	h = handleSimpleOrigin(h)
	service.Mux.Handle("GET", "/my/simple/download", ctrl.MuxHandler("download", h, nil))
	service.LogInfo("mount", "ctrl", "Simple", "action", "Download", "route", "GET /my/simple/download")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewMyFeaturesSimpleContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.MyFeatures(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleSimpleOrigin(h)
	service.Mux.Handle("GET", "/my/simple/features", ctrl.MuxHandler("my features", h, nil))
	service.LogInfo("mount", "ctrl", "Simple", "action", "MyFeatures", "route", "GET /my/simple/features", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewMySimpleSummarySimpleContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.MySimpleSummary(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleSimpleOrigin(h)
	service.Mux.Handle("GET", "/my/simple", ctrl.MuxHandler("my simple summary", h, nil))
	service.LogInfo("mount", "ctrl", "Simple", "action", "MySimpleSummary", "route", "GET /my/simple", "security", "jwt")
}

// handleSimpleOrigin applies the CORS response headers corresponding to the origin.
func handleSimpleOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// SourceController is the controller interface for the Source actions.
type SourceController interface {
	goa.Muxer
	List(*ListSourceContext) error
	ListExpeditionID(*ListExpeditionIDSourceContext) error
	ListID(*ListIDSourceContext) error
	SummaryByID(*SummaryByIDSourceContext) error
	TemporalClusterGeometryByID(*TemporalClusterGeometryByIDSourceContext) error
	Update(*UpdateSourceContext) error
}

// MountSourceController "mounts" a Source resource controller on the given service.
func MountSourceController(service *goa.Service, ctrl SourceController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/sources", ctrl.MuxHandler("preflight", handleSourceOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/expeditions/:expeditionId/sources", ctrl.MuxHandler("preflight", handleSourceOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/sources/:sourceId", ctrl.MuxHandler("preflight", handleSourceOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/sources/:sourceId/summary", ctrl.MuxHandler("preflight", handleSourceOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/sources/:sourceId/temporal/:clusterId/geometry", ctrl.MuxHandler("preflight", handleSourceOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSourceContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSourceOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/sources", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Source", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/sources")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListExpeditionIDSourceContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListExpeditionID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleSourceOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expeditionId/sources", ctrl.MuxHandler("list expedition id", h, nil))
	service.LogInfo("mount", "ctrl", "Source", "action", "ListExpeditionID", "route", "GET /expeditions/:expeditionId/sources", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDSourceContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSourceOrigin(h)
	service.Mux.Handle("GET", "/sources/:sourceId", ctrl.MuxHandler("list id", h, nil))
	service.LogInfo("mount", "ctrl", "Source", "action", "ListID", "route", "GET /sources/:sourceId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSummaryByIDSourceContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.SummaryByID(rctx)
	}
	h = handleSourceOrigin(h)
	service.Mux.Handle("GET", "/sources/:sourceId/summary", ctrl.MuxHandler("summary by id", h, nil))
	service.LogInfo("mount", "ctrl", "Source", "action", "SummaryByID", "route", "GET /sources/:sourceId/summary")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewTemporalClusterGeometryByIDSourceContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.TemporalClusterGeometryByID(rctx)
	}
	h = handleSourceOrigin(h)
	service.Mux.Handle("GET", "/sources/:sourceId/temporal/:clusterId/geometry", ctrl.MuxHandler("temporal cluster geometry by id", h, nil))
	service.LogInfo("mount", "ctrl", "Source", "action", "TemporalClusterGeometryByID", "route", "GET /sources/:sourceId/temporal/:clusterId/geometry")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateSourceContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateSourcePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleSourceOrigin(h)
	service.Mux.Handle("PATCH", "/sources/:sourceId", ctrl.MuxHandler("update", h, unmarshalUpdateSourcePayload))
	service.LogInfo("mount", "ctrl", "Source", "action", "Update", "route", "PATCH /sources/:sourceId", "security", "jwt")
}

// handleSourceOrigin applies the CORS response headers corresponding to the origin.
func handleSourceOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalUpdateSourcePayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateSourcePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateSourcePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SourceTokenController is the controller interface for the SourceToken actions.
type SourceTokenController interface {
	goa.Muxer
	Add(*AddSourceTokenContext) error
	Delete(*DeleteSourceTokenContext) error
	List(*ListSourceTokenContext) error
	ListID(*ListIDSourceTokenContext) error
}

// MountSourceTokenController "mounts" a SourceToken resource controller on the given service.
func MountSourceTokenController(service *goa.Service, ctrl SourceTokenController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expeditionId/source-tokens", ctrl.MuxHandler("preflight", handleSourceTokenOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/source-tokens/:sourceTokenId", ctrl.MuxHandler("preflight", handleSourceTokenOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/source-tokens", ctrl.MuxHandler("preflight", handleSourceTokenOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddSourceTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleSourceTokenOrigin(h)
	service.Mux.Handle("POST", "/expeditions/:expeditionId/source-tokens", ctrl.MuxHandler("add", h, nil))
	service.LogInfo("mount", "ctrl", "SourceToken", "action", "Add", "route", "POST /expeditions/:expeditionId/source-tokens", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteSourceTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleSourceTokenOrigin(h)
	service.Mux.Handle("DELETE", "/source-tokens/:sourceTokenId", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "SourceToken", "action", "Delete", "route", "DELETE /source-tokens/:sourceTokenId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSourceTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleSourceTokenOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/source-tokens", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "SourceToken", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/source-tokens", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDSourceTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleSourceTokenOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expeditionId/source-tokens", ctrl.MuxHandler("list id", h, nil))
	service.LogInfo("mount", "ctrl", "SourceToken", "action", "ListID", "route", "GET /expeditions/:expeditionId/source-tokens", "security", "jwt")
}

// handleSourceTokenOrigin applies the CORS response headers corresponding to the origin.
func handleSourceTokenOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// StationController is the controller interface for the Station actions.
type StationController interface {
	goa.Muxer
	Add(*AddStationContext) error
	Get(*GetStationContext) error
	Update(*UpdateStationContext) error
}

// MountStationController "mounts" a Station resource controller on the given service.
func MountStationController(service *goa.Service, ctrl StationController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/stations", ctrl.MuxHandler("preflight", handleStationOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/stations/@/:station", ctrl.MuxHandler("preflight", handleStationOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/stations/:stationId", ctrl.MuxHandler("preflight", handleStationOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddStationContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddStationPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api: access")
	h = handleStationOrigin(h)
	service.Mux.Handle("POST", "/stations", ctrl.MuxHandler("add", h, unmarshalAddStationPayload))
	service.LogInfo("mount", "ctrl", "Station", "action", "Add", "route", "POST /stations", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetStationContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleStationOrigin(h)
	service.Mux.Handle("GET", "/stations/@/:station", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Station", "action", "Get", "route", "GET /stations/@/:station")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateStationContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddStationPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api: access")
	h = handleStationOrigin(h)
	service.Mux.Handle("PATCH", "/stations/:stationId", ctrl.MuxHandler("update", h, unmarshalUpdateStationPayload))
	service.LogInfo("mount", "ctrl", "Station", "action", "Update", "route", "PATCH /stations/:stationId", "security", "jwt")
}

// handleStationOrigin applies the CORS response headers corresponding to the origin.
func handleStationOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddStationPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddStationPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addStationPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateStationPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateStationPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addStationPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// StationLogController is the controller interface for the StationLog actions.
type StationLogController interface {
	goa.Muxer
	Add(*AddStationLogContext) error
	Get(*GetStationLogContext) error
	Update(*UpdateStationLogContext) error
}

// MountStationLogController "mounts" a StationLog resource controller on the given service.
func MountStationLogController(service *goa.Service, ctrl StationLogController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/station_logs", ctrl.MuxHandler("preflight", handleStationLogOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/stationlogs/@/:stationLog", ctrl.MuxHandler("preflight", handleStationLogOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/stationlogs/:stationLogId", ctrl.MuxHandler("preflight", handleStationLogOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddStationLogContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddStationLogPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api: access")
	h = handleStationLogOrigin(h)
	service.Mux.Handle("POST", "/station_logs", ctrl.MuxHandler("add", h, unmarshalAddStationLogPayload))
	service.LogInfo("mount", "ctrl", "StationLog", "action", "Add", "route", "POST /station_logs", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetStationLogContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleStationLogOrigin(h)
	service.Mux.Handle("GET", "/stationlogs/@/:stationLog", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "StationLog", "action", "Get", "route", "GET /stationlogs/@/:stationLog")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateStationLogContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddStationLogPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api: access")
	h = handleStationLogOrigin(h)
	service.Mux.Handle("PATCH", "/stationlogs/:stationLogId", ctrl.MuxHandler("update", h, unmarshalUpdateStationLogPayload))
	service.LogInfo("mount", "ctrl", "StationLog", "action", "Update", "route", "PATCH /stationlogs/:stationLogId", "security", "jwt")
}

// handleStationLogOrigin applies the CORS response headers corresponding to the origin.
func handleStationLogOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddStationLogPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddStationLogPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addStationLogPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateStationLogPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateStationLogPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addStationLogPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/swagger.yaml", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swagger.json", "api/public/swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "api/public/swagger/swagger.json", "route", "GET /swagger.json")

	h = ctrl.FileHandler("/swagger.yaml", "api/public/swagger/swagger.yaml")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.yaml", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "api/public/swagger/swagger.yaml", "route", "GET /swagger.yaml")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {
	spec1 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec3 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec3) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// TeamController is the controller interface for the Team actions.
type TeamController interface {
	goa.Muxer
	Add(*AddTeamContext) error
	Delete(*DeleteTeamContext) error
	Get(*GetTeamContext) error
	GetID(*GetIDTeamContext) error
	List(*ListTeamContext) error
	ListID(*ListIDTeamContext) error
	Update(*UpdateTeamContext) error
}

// MountTeamController "mounts" a Team resource controller on the given service.
func MountTeamController(service *goa.Service, ctrl TeamController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expeditionId/teams", ctrl.MuxHandler("preflight", handleTeamOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/teams/:teamId", ctrl.MuxHandler("preflight", handleTeamOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team", ctrl.MuxHandler("preflight", handleTeamOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/teams", ctrl.MuxHandler("preflight", handleTeamOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddTeamPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("POST", "/expeditions/:expeditionId/teams", ctrl.MuxHandler("add", h, unmarshalAddTeamPayload))
	service.LogInfo("mount", "ctrl", "Team", "action", "Add", "route", "POST /expeditions/:expeditionId/teams", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("DELETE", "/teams/:teamId", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "Delete", "route", "DELETE /teams/:teamId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/teams/@/:team", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "Get", "route", "GET /projects/@/:project/expeditions/@/:expedition/teams/@/:team", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("GET", "/teams/:teamId", ctrl.MuxHandler("get id", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "GetID", "route", "GET /teams/:teamId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/teams", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/teams", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expeditionId/teams", ctrl.MuxHandler("list id", h, nil))
	service.LogInfo("mount", "ctrl", "Team", "action", "ListID", "route", "GET /expeditions/:expeditionId/teams", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateTeamContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddTeamPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTeamOrigin(h)
	service.Mux.Handle("PATCH", "/teams/:teamId", ctrl.MuxHandler("update", h, unmarshalUpdateTeamPayload))
	service.LogInfo("mount", "ctrl", "Team", "action", "Update", "route", "PATCH /teams/:teamId", "security", "jwt")
}

// handleTeamOrigin applies the CORS response headers corresponding to the origin.
func handleTeamOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddTeamPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddTeamPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addTeamPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateTeamPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateTeamPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addTeamPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// TwitterController is the controller interface for the Twitter actions.
type TwitterController interface {
	goa.Muxer
	Add(*AddTwitterContext) error
	Callback(*CallbackTwitterContext) error
	GetID(*GetIDTwitterContext) error
	List(*ListTwitterContext) error
	ListID(*ListIDTwitterContext) error
}

// MountTwitterController "mounts" a Twitter resource controller on the given service.
func MountTwitterController(service *goa.Service, ctrl TwitterController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/expeditions/:expeditionId/sources/twitter-accounts", ctrl.MuxHandler("preflight", handleTwitterOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/twitter/callback", ctrl.MuxHandler("preflight", handleTwitterOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/sources/twitter-accounts/:sourceId", ctrl.MuxHandler("preflight", handleTwitterOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/projects/@/:project/expeditions/@/:expedition/sources/twitter-accounts", ctrl.MuxHandler("preflight", handleTwitterOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddTwitterAccountSourcePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTwitterOrigin(h)
	service.Mux.Handle("POST", "/expeditions/:expeditionId/sources/twitter-accounts", ctrl.MuxHandler("add", h, unmarshalAddTwitterPayload))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "Add", "route", "POST /expeditions/:expeditionId/sources/twitter-accounts", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCallbackTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Callback(rctx)
	}
	h = handleTwitterOrigin(h)
	service.Mux.Handle("GET", "/twitter/callback", ctrl.MuxHandler("callback", h, nil))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "Callback", "route", "GET /twitter/callback")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTwitterOrigin(h)
	service.Mux.Handle("GET", "/sources/twitter-accounts/:sourceId", ctrl.MuxHandler("get id", h, nil))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "GetID", "route", "GET /sources/twitter-accounts/:sourceId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTwitterOrigin(h)
	service.Mux.Handle("GET", "/projects/@/:project/expeditions/@/:expedition/sources/twitter-accounts", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "List", "route", "GET /projects/@/:project/expeditions/@/:expedition/sources/twitter-accounts", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListIDTwitterContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleTwitterOrigin(h)
	service.Mux.Handle("GET", "/expeditions/:expeditionId/sources/twitter-accounts", ctrl.MuxHandler("list id", h, nil))
	service.LogInfo("mount", "ctrl", "Twitter", "action", "ListID", "route", "GET /expeditions/:expeditionId/sources/twitter-accounts", "security", "jwt")
}

// handleTwitterOrigin applies the CORS response headers corresponding to the origin.
func handleTwitterOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddTwitterPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddTwitterPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addTwitterAccountSourcePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// UserController is the controller interface for the User actions.
type UserController interface {
	goa.Muxer
	Add(*AddUserContext) error
	GetCurrent(*GetCurrentUserContext) error
	GetID(*GetIDUserContext) error
	List(*ListUserContext) error
	Login(*LoginUserContext) error
	Logout(*LogoutUserContext) error
	Refresh(*RefreshUserContext) error
	Update(*UpdateUserContext) error
	Validate(*ValidateUserContext) error
}

// MountUserController "mounts" a User resource controller on the given service.
func MountUserController(service *goa.Service, ctrl UserController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/users", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/user", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/:userId", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/login", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/logout", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/refresh", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/validate", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/users", ctrl.MuxHandler("add", h, unmarshalAddUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Add", "route", "POST /users")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetCurrentUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetCurrent(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/user", ctrl.MuxHandler("get current", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "GetCurrent", "route", "GET /user", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetIDUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetID(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/users/:userId", ctrl.MuxHandler("get id", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "GetID", "route", "GET /users/:userId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/users", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "List", "route", "GET /users", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLoginUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*LoginPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Login(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/login", ctrl.MuxHandler("login", h, unmarshalLoginUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Login", "route", "POST /login")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLogoutUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Logout(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/logout", ctrl.MuxHandler("logout", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "Logout", "route", "POST /logout", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRefreshUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*RefreshUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Refresh(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/refresh", ctrl.MuxHandler("refresh", h, unmarshalRefreshUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Refresh", "route", "POST /refresh")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserOrigin(h)
	service.Mux.Handle("PATCH", "/users/:userId", ctrl.MuxHandler("update", h, unmarshalUpdateUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Update", "route", "PATCH /users/:userId", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewValidateUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Validate(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/validate", ctrl.MuxHandler("validate", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "Validate", "route", "GET /validate")
}

// handleUserOrigin applies the CORS response headers corresponding to the origin.
func handleUserOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile("(.+[.])?fieldkit.org:\\d+")
	spec1 := regexp.MustCompile("(.+[.])?local.fkdev.org:\\d+")
	spec2 := regexp.MustCompile("(.+[.])?localhost:\\d+")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec2) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://*.fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.org:8080") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fieldkit.team") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "https://fkdev.org") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Expose-Headers", "Authorization, Content-Type")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS, POST, DELETE, PATCH, PUT")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAddUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalLoginUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalLoginUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &loginPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalRefreshUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalRefreshUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &refreshUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
