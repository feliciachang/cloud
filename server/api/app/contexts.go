// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application Contexts
//
// Command:
// $ main

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// ListBySourceExportContext provides the Export list by source action context.
type ListBySourceExportContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SourceID int
}

// NewListBySourceExportContext parses the incoming request URL and body, performs validations and creates the
// context used by the Export controller list by source action.
func NewListBySourceExportContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBySourceExportContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBySourceExportContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSourceID := req.Params["sourceId"]
	if len(paramSourceID) > 0 {
		rawSourceID := paramSourceID[0]
		if sourceID, err2 := strconv.Atoi(rawSourceID); err2 == nil {
			rctx.SourceID = sourceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceId", rawSourceID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBySourceExportContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListBySourceExportContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddFirmwareContext provides the Firmware add action context.
type AddFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddFirmwarePayload
}

// NewAddFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller add action.
func NewAddFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddFirmwareContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// CheckFirmwareContext provides the Firmware check action context.
type CheckFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FkCompiled  *string
	IfNoneMatch *string
	DeviceID    string
	Module      string
}

// NewCheckFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller check action.
func NewCheckFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*CheckFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CheckFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerFkCompiled := req.Header["Fk-Compiled"]
	if len(headerFkCompiled) > 0 {
		rawFkCompiled := headerFkCompiled[0]
		req.Params["Fk-Compiled"] = []string{rawFkCompiled}
		rctx.FkCompiled = &rawFkCompiled
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramModule := req.Params["module"]
	if len(paramModule) > 0 {
		rawModule := paramModule[0]
		rctx.Module = rawModule
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CheckFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotModified sends a HTTP response with status code 304.
func (ctx *CheckFirmwareContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CheckFirmwareContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListFirmwareContext provides the Firmware list action context.
type ListFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Module  *string
	Profile *string
}

// NewListFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller list action.
func NewListFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramModule := req.Params["module"]
	if len(paramModule) > 0 {
		rawModule := paramModule[0]
		rctx.Module = &rawModule
	}
	paramProfile := req.Params["profile"]
	if len(paramProfile) > 0 {
		rawProfile := paramProfile[0]
		rctx.Profile = &rawProfile
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListFirmwareContext) OK(r *Firmwares) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.firmwares+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListDeviceFirmwareContext provides the Firmware list device action context.
type ListDeviceFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
}

// NewListDeviceFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller list device action.
func NewListDeviceFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListDeviceFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListDeviceFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListDeviceFirmwareContext) OK(r *Firmwares) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.firmwares+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// UpdateFirmwareContext provides the Firmware update action context.
type UpdateFirmwareContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UpdateDeviceFirmwarePayload
}

// NewUpdateFirmwareContext parses the incoming request URL and body, performs validations and creates the
// context used by the Firmware controller update action.
func NewUpdateFirmwareContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateFirmwareContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateFirmwareContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateFirmwareContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateFirmwareContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateFirmwareContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GeographicalQueryGeoJSONContext provides the GeoJSON geographical query action context.
type GeographicalQueryGeoJSONContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGeographicalQueryGeoJSONContext parses the incoming request URL and body, performs validations and creates the
// context used by the GeoJSON controller geographical query action.
func NewGeographicalQueryGeoJSONContext(ctx context.Context, r *http.Request, service *goa.Service) (*GeographicalQueryGeoJSONContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GeographicalQueryGeoJSONContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GeographicalQueryGeoJSONContext) OK(r *MapFeatures) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.map_features+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GeographicalQueryGeoJSONContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListByIDGeoJSONContext provides the GeoJSON list by id action context.
type ListByIDGeoJSONContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FeatureID int
}

// NewListByIDGeoJSONContext parses the incoming request URL and body, performs validations and creates the
// context used by the GeoJSON controller list by id action.
func NewListByIDGeoJSONContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListByIDGeoJSONContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListByIDGeoJSONContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFeatureID := req.Params["featureId"]
	if len(paramFeatureID) > 0 {
		rawFeatureID := paramFeatureID[0]
		if featureID, err2 := strconv.Atoi(rawFeatureID); err2 == nil {
			rctx.FeatureID = featureID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("featureId", rawFeatureID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListByIDGeoJSONContext) OK(r *PagedGeoJSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.paged_geojson+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListByIDGeoJSONContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListBySourceGeoJSONContext provides the GeoJSON list by source action context.
type ListBySourceGeoJSONContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Descending *bool
	SourceID   int
}

// NewListBySourceGeoJSONContext parses the incoming request URL and body, performs validations and creates the
// context used by the GeoJSON controller list by source action.
func NewListBySourceGeoJSONContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBySourceGeoJSONContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBySourceGeoJSONContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDescending := req.Params["descending"]
	if len(paramDescending) > 0 {
		rawDescending := paramDescending[0]
		if descending, err2 := strconv.ParseBool(rawDescending); err2 == nil {
			tmp3 := &descending
			rctx.Descending = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("descending", rawDescending, "boolean"))
		}
	}
	paramSourceID := req.Params["sourceId"]
	if len(paramSourceID) > 0 {
		rawSourceID := paramSourceID[0]
		if sourceID, err2 := strconv.Atoi(rawSourceID); err2 == nil {
			rctx.SourceID = sourceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceId", rawSourceID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBySourceGeoJSONContext) OK(r *PagedGeoJSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.paged_geojson+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListBySourceGeoJSONContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListBySourceQueryContext provides the Query list by source action context.
type ListBySourceQueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SourceID int
}

// NewListBySourceQueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the Query controller list by source action.
func NewListBySourceQueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBySourceQueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBySourceQueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSourceID := req.Params["sourceId"]
	if len(paramSourceID) > 0 {
		rawSourceID := paramSourceID[0]
		if sourceID, err2 := strconv.Atoi(rawSourceID); err2 == nil {
			rctx.SourceID = sourceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceId", rawSourceID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBySourceQueryContext) OK(r *QueryData) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.queried+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListBySourceQueryContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// CheckTasksContext provides the Tasks check action context.
type CheckTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCheckTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the Tasks controller check action.
func NewCheckTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*CheckTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CheckTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CheckTasksContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CheckTasksContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// FiveTasksContext provides the Tasks five action context.
type FiveTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewFiveTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the Tasks controller five action.
func NewFiveTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*FiveTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := FiveTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *FiveTasksContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *FiveTasksContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// RefreshTasksContext provides the Tasks refresh action context.
type RefreshTasksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID   string
	FileTypeID string
}

// NewRefreshTasksContext parses the incoming request URL and body, performs validations and creates the
// context used by the Tasks controller refresh action.
func NewRefreshTasksContext(ctx context.Context, r *http.Request, service *goa.Service) (*RefreshTasksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RefreshTasksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramFileTypeID := req.Params["fileTypeId"]
	if len(paramFileTypeID) > 0 {
		rawFileTypeID := paramFileTypeID[0]
		rctx.FileTypeID = rawFileTypeID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RefreshTasksContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RefreshTasksContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RefreshTasksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// AddAdministratorContext provides the administrator add action context.
type AddAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *AddAdministratorPayload
}

// NewAddAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller add action.
func NewAddAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddAdministratorContext) OK(r *ProjectAdministrator) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrator+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddAdministratorContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteAdministratorContext provides the administrator delete action context.
type DeleteAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	UserID    int
}

// NewDeleteAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller delete action.
func NewDeleteAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteAdministratorContext) OK(r *ProjectAdministrator) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrator+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAdministratorContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetAdministratorContext provides the administrator get action context.
type GetAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email   string
	Project string
}

// NewGetAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller get action.
func NewGetAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) > 0 {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAdministratorContext) OK(r *ProjectAdministrator) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrator+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetIDAdministratorContext provides the administrator get id action context.
type GetIDAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	UserID    int
}

// NewGetIDAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller get id action.
func NewGetIDAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDAdministratorContext) OK(r *ProjectAdministrator) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrator+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListAdministratorContext provides the administrator list action context.
type ListAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewListAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller list action.
func NewListAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAdministratorContext) OK(r *ProjectAdministrators) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrators+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListAdministratorContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDAdministratorContext provides the administrator list id action context.
type ListIDAdministratorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewListIDAdministratorContext parses the incoming request URL and body, performs validations and creates the
// context used by the administrator controller list id action.
func NewListIDAdministratorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDAdministratorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDAdministratorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDAdministratorContext) OK(r *ProjectAdministrators) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.administrators+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDAdministratorContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddDeviceContext provides the device add action context.
type AddDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
	Payload      *AddDeviceSourcePayload
}

// NewAddDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller add action.
func NewAddDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddDeviceContext) OK(r *DeviceSource) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKPublic sends a HTTP response with status code 200.
func (ctx *AddDeviceContext) OKPublic(r *DeviceSourcePublic) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeviceExists sends a HTTP response with status code 500.
func (ctx *AddDeviceContext) DeviceExists(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(500)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetIDDeviceContext provides the device get id action context.
type GetIDDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewGetIDDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller get id action.
func NewGetIDDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDDeviceContext) OK(r *DeviceSource) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKPublic sends a HTTP response with status code 200.
func (ctx *GetIDDeviceContext) OKPublic(r *DeviceSourcePublic) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListDeviceContext provides the device list action context.
type ListDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller list action.
func NewListDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListDeviceContext) OK(r *DeviceSources) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_sources+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateDeviceContext provides the device update action context.
type UpdateDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *UpdateDeviceSourcePayload
}

// NewUpdateDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller update action.
func NewUpdateDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateDeviceContext) OK(r *DeviceSource) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKPublic sends a HTTP response with status code 200.
func (ctx *UpdateDeviceContext) OKPublic(r *DeviceSourcePublic) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateLocationDeviceContext provides the device update location action context.
type UpdateLocationDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *UpdateDeviceSourceLocationPayload
}

// NewUpdateLocationDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller update location action.
func NewUpdateLocationDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateLocationDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateLocationDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateLocationDeviceContext) OK(r *DeviceSource) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKPublic sends a HTTP response with status code 200.
func (ctx *UpdateLocationDeviceContext) OKPublic(r *DeviceSourcePublic) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateLocationDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateSchemaDeviceContext provides the device update schema action context.
type UpdateSchemaDeviceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *UpdateDeviceSourceSchemaPayload
}

// NewUpdateSchemaDeviceContext parses the incoming request URL and body, performs validations and creates the
// context used by the device controller update schema action.
func NewUpdateSchemaDeviceContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateSchemaDeviceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateSchemaDeviceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateSchemaDeviceContext) OK(r *DeviceSchemas) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_schemas+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateSchemaDeviceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AllDeviceDataContext provides the device_data all action context.
type AllDeviceDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
}

// NewAllDeviceDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the device_data controller all action.
func NewAllDeviceDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*AllDeviceDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AllDeviceDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AllDeviceDataContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Found sends a HTTP response with status code 302.
func (ctx *AllDeviceDataContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AllDeviceDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Busy sends a HTTP response with status code 503.
func (ctx *AllDeviceDataContext) Busy() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// AllDeviceLogsContext provides the device_logs all action context.
type AllDeviceLogsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
}

// NewAllDeviceLogsContext parses the incoming request URL and body, performs validations and creates the
// context used by the device_logs controller all action.
func NewAllDeviceLogsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AllDeviceLogsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AllDeviceLogsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AllDeviceLogsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Found sends a HTTP response with status code 302.
func (ctx *AllDeviceLogsContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AllDeviceLogsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Busy sends a HTTP response with status code 503.
func (ctx *AllDeviceLogsContext) Busy() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// AddExpeditionContext provides the expedition add action context.
type AddExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *AddExpeditionPayload
}

// NewAddExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller add action.
func NewAddExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddExpeditionContext) OK(r *Expedition) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailed sends a HTTP response with status code 200.
func (ctx *AddExpeditionContext) OKDetailed(r *ExpeditionDetailed) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetExpeditionContext provides the expedition get action context.
type GetExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewGetExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller get action.
func NewGetExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetExpeditionContext) OK(r *Expedition) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailed sends a HTTP response with status code 200.
func (ctx *GetExpeditionContext) OKDetailed(r *ExpeditionDetailed) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDExpeditionContext provides the expedition get id action context.
type GetIDExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewGetIDExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller get id action.
func NewGetIDExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDExpeditionContext) OK(r *Expedition) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailed sends a HTTP response with status code 200.
func (ctx *GetIDExpeditionContext) OKDetailed(r *ExpeditionDetailed) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListExpeditionContext provides the expedition list action context.
type ListExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewListExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller list action.
func NewListExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListExpeditionContext) OK(r *Expeditions) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expeditions+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDExpeditionContext provides the expedition list id action context.
type ListIDExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewListIDExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller list id action.
func NewListIDExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDExpeditionContext) OK(r *Expeditions) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expeditions+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateExpeditionContext provides the expedition update action context.
type UpdateExpeditionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
	Payload      *AddExpeditionPayload
}

// NewUpdateExpeditionContext parses the incoming request URL and body, performs validations and creates the
// context used by the expedition controller update action.
func NewUpdateExpeditionContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateExpeditionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateExpeditionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateExpeditionContext) OK(r *Expedition) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailed sends a HTTP response with status code 200.
func (ctx *UpdateExpeditionContext) OKDetailed(r *ExpeditionDetailed) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.expedition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateExpeditionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// CsvFilesContext provides the files csv action context.
type CsvFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Dl     bool
	FileID string
}

// NewCsvFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller csv action.
func NewCsvFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CsvFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CsvFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDl := req.Params["dl"]
	if len(paramDl) == 0 {
		rctx.Dl = true
	} else {
		rawDl := paramDl[0]
		if dl, err2 := strconv.ParseBool(rawDl); err2 == nil {
			rctx.Dl = dl
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("dl", rawDl, "boolean"))
		}
	}
	paramFileID := req.Params["fileId"]
	if len(paramFileID) > 0 {
		rawFileID := paramFileID[0]
		rctx.FileID = rawFileID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CsvFilesContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CsvFilesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeviceInfoFilesContext provides the files device info action context.
type DeviceInfoFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
}

// NewDeviceInfoFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller device info action.
func NewDeviceInfoFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeviceInfoFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeviceInfoFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeviceInfoFilesContext) OK(r *DeviceDetails) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.details+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeviceInfoFilesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// FileFilesContext provides the files file action context.
type FileFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FileID string
}

// NewFileFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller file action.
func NewFileFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*FileFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := FileFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFileID := req.Params["fileId"]
	if len(paramFileID) > 0 {
		rawFileID := paramFileID[0]
		rctx.FileID = rawFileID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *FileFilesContext) OK(r *DeviceFile) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.file+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *FileFilesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetDeviceLocationHistoryFilesContext provides the files get device location history action context.
type GetDeviceLocationHistoryFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
	Page     *int
}

// NewGetDeviceLocationHistoryFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller get device location history action.
func NewGetDeviceLocationHistoryFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetDeviceLocationHistoryFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetDeviceLocationHistoryFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp23 := page
			tmp22 := &tmp23
			rctx.Page = tmp22
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetDeviceLocationHistoryFilesContext) OK(r *LocationHistory) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.location.history+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListDeviceDataFilesFilesContext provides the files list device data files action context.
type ListDeviceDataFilesFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
	Page     *int
}

// NewListDeviceDataFilesFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller list device data files action.
func NewListDeviceDataFilesFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListDeviceDataFilesFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListDeviceDataFilesFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp25 := page
			tmp24 := &tmp25
			rctx.Page = tmp24
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListDeviceDataFilesFilesContext) OK(r *DeviceFiles) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.files+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListDeviceLogFilesFilesContext provides the files list device log files action context.
type ListDeviceLogFilesFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
	Page     *int
}

// NewListDeviceLogFilesFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller list device log files action.
func NewListDeviceLogFilesFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListDeviceLogFilesFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListDeviceLogFilesFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp27 := page
			tmp26 := &tmp27
			rctx.Page = tmp26
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListDeviceLogFilesFilesContext) OK(r *DeviceFiles) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.files+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListDevicesFilesContext provides the files list devices action context.
type ListDevicesFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListDevicesFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller list devices action.
func NewListDevicesFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListDevicesFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListDevicesFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListDevicesFilesContext) OK(r *Devices) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.devices+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListDevicesFilesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// RawFilesContext provides the files raw action context.
type RawFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Dl     bool
	FileID string
}

// NewRawFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller raw action.
func NewRawFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*RawFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RawFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDl := req.Params["dl"]
	if len(paramDl) == 0 {
		rctx.Dl = true
	} else {
		rawDl := paramDl[0]
		if dl, err2 := strconv.ParseBool(rawDl); err2 == nil {
			rctx.Dl = dl
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("dl", rawDl, "boolean"))
		}
	}
	paramFileID := req.Params["fileId"]
	if len(paramFileID) > 0 {
		rawFileID := paramFileID[0]
		rctx.FileID = rawFileID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RawFilesContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RawFilesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// StatusFilesContext provides the files status action context.
type StatusFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewStatusFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller status action.
func NewStatusFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*StatusFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StatusFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StatusFilesContext) OK(r *FilesStatus) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.files.status+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// UpdateDeviceInfoFilesContext provides the files update device info action context.
type UpdateDeviceInfoFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DeviceID string
	Payload  *UpdateDeviceInfoPayload
}

// NewUpdateDeviceInfoFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller update device info action.
func NewUpdateDeviceInfoFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateDeviceInfoFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateDeviceInfoFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDeviceID := req.Params["deviceId"]
	if len(paramDeviceID) > 0 {
		rawDeviceID := paramDeviceID[0]
		rctx.DeviceID = rawDeviceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateDeviceInfoFilesContext) OK(r *DeviceDetails) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device.details+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateDeviceInfoFilesContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateDeviceInfoFilesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// AddMemberContext provides the member add action context.
type AddMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID  int
	Payload *AddMemberPayload
}

// NewAddMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller add action.
func NewAddMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["teamId"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("teamId", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddMemberContext) OK(r *TeamMember) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddMemberContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteMemberContext provides the member delete action context.
type DeleteMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
	UserID int
}

// NewDeleteMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller delete action.
func NewDeleteMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["teamId"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("teamId", rawTeamID, "integer"))
		}
	}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteMemberContext) OK(r *TeamMember) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteMemberContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetMemberContext provides the member get action context.
type GetMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email      string
	Expedition string
	Project    string
	Team       string
}

// NewGetMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller get action.
func NewGetMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) > 0 {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
	}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	paramTeam := req.Params["team"]
	if len(paramTeam) > 0 {
		rawTeam := paramTeam[0]
		rctx.Team = rawTeam
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Team); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`team`, rctx.Team, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Team) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`team`, rctx.Team, utf8.RuneCountInString(rctx.Team), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMemberContext) OK(r *TeamMember) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetIDMemberContext provides the member get id action context.
type GetIDMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
	UserID int
}

// NewGetIDMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller get id action.
func NewGetIDMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["teamId"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("teamId", rawTeamID, "integer"))
		}
	}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDMemberContext) OK(r *TeamMember) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListMemberContext provides the member list action context.
type ListMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
	Team       string
}

// NewListMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller list action.
func NewListMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	paramTeam := req.Params["team"]
	if len(paramTeam) > 0 {
		rawTeam := paramTeam[0]
		rctx.Team = rawTeam
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Team); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`team`, rctx.Team, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Team) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`team`, rctx.Team, utf8.RuneCountInString(rctx.Team), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMemberContext) OK(r *TeamMembers) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.members+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListMemberContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDMemberContext provides the member list id action context.
type ListIDMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
}

// NewListIDMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller list id action.
func NewListIDMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["teamId"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("teamId", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDMemberContext) OK(r *TeamMembers) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.members+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDMemberContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateMemberContext provides the member update action context.
type UpdateMemberContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID  int
	UserID  int
	Payload *UpdateMemberPayload
}

// NewUpdateMemberContext parses the incoming request URL and body, performs validations and creates the
// context used by the member controller update action.
func NewUpdateMemberContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateMemberContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateMemberContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["teamId"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("teamId", rawTeamID, "integer"))
		}
	}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateMemberContext) OK(r *TeamMember) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.member+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ExpeditionGetIDPictureContext provides the picture expedition get id action context.
type ExpeditionGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewExpeditionGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller expedition get id action.
func NewExpeditionGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*ExpeditionGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ExpeditionGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ExpeditionGetIDPictureContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ExpeditionGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ProjectGetIDPictureContext provides the picture project get id action context.
type ProjectGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewProjectGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller project get id action.
func NewProjectGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProjectGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProjectGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProjectGetIDPictureContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ProjectGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UserGetIDPictureContext provides the picture user get id action context.
type UserGetIDPictureContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewUserGetIDPictureContext parses the incoming request URL and body, performs validations and creates the
// context used by the picture controller user get id action.
func NewUserGetIDPictureContext(ctx context.Context, r *http.Request, service *goa.Service) (*UserGetIDPictureContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UserGetIDPictureContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UserGetIDPictureContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/png")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UserGetIDPictureContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddProjectContext provides the project add action context.
type AddProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddProjectPayload
}

// NewAddProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller add action.
func NewAddProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddProjectContext) OK(r *Project) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetProjectContext provides the project get action context.
type GetProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Project string
}

// NewGetProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller get action.
func NewGetProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetProjectContext) OK(r *Project) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDProjectContext provides the project get id action context.
type GetIDProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
}

// NewGetIDProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller get id action.
func NewGetIDProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDProjectContext) OK(r *Project) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListProjectContext provides the project list action context.
type ListProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list action.
func NewListProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListProjectContext) OK(r *Projects) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListCurrentProjectContext provides the project list current action context.
type ListCurrentProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCurrentProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller list current action.
func NewListCurrentProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCurrentProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCurrentProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCurrentProjectContext) OK(r *Projects) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.projects+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListCurrentProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateProjectContext provides the project update action context.
type UpdateProjectContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProjectID int
	Payload   *AddProjectPayload
}

// NewUpdateProjectContext parses the incoming request URL and body, performs validations and creates the
// context used by the project controller update action.
func NewUpdateProjectContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateProjectContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateProjectContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProjectID := req.Params["projectId"]
	if len(paramProjectID) > 0 {
		rawProjectID := paramProjectID[0]
		if projectID, err2 := strconv.Atoi(rawProjectID); err2 == nil {
			rctx.ProjectID = projectID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("projectId", rawProjectID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateProjectContext) OK(r *Project) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.project+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateProjectContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DownloadSimpleContext provides the simple download action context.
type DownloadSimpleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Token string
}

// NewDownloadSimpleContext parses the incoming request URL and body, performs validations and creates the
// context used by the simple controller download action.
func NewDownloadSimpleContext(ctx context.Context, r *http.Request, service *goa.Service) (*DownloadSimpleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DownloadSimpleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramToken := req.Params["token"]
	if len(paramToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("token"))
	} else {
		rawToken := paramToken[0]
		rctx.Token = rawToken
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DownloadSimpleContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DownloadSimpleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// MyFeaturesSimpleContext provides the simple my features action context.
type MyFeaturesSimpleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewMyFeaturesSimpleContext parses the incoming request URL and body, performs validations and creates the
// context used by the simple controller my features action.
func NewMyFeaturesSimpleContext(ctx context.Context, r *http.Request, service *goa.Service) (*MyFeaturesSimpleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MyFeaturesSimpleContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MyFeaturesSimpleContext) OK(r *MapFeatures) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.map_features+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *MyFeaturesSimpleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// MySimpleSummarySimpleContext provides the simple my simple summary action context.
type MySimpleSummarySimpleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewMySimpleSummarySimpleContext parses the incoming request URL and body, performs validations and creates the
// context used by the simple controller my simple summary action.
func NewMySimpleSummarySimpleContext(ctx context.Context, r *http.Request, service *goa.Service) (*MySimpleSummarySimpleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MySimpleSummarySimpleContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MySimpleSummarySimpleContext) OK(r *MySimpleSummary) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.simple_summary+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *MySimpleSummarySimpleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListSourceContext provides the source list action context.
type ListSourceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListSourceContext parses the incoming request URL and body, performs validations and creates the
// context used by the source controller list action.
func NewListSourceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSourceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSourceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSourceContext) OK(r *Sources) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.sources+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListSourceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListExpeditionIDSourceContext provides the source list expedition id action context.
type ListExpeditionIDSourceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListExpeditionIDSourceContext parses the incoming request URL and body, performs validations and creates the
// context used by the source controller list expedition id action.
func NewListExpeditionIDSourceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListExpeditionIDSourceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListExpeditionIDSourceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListExpeditionIDSourceContext) OK(r *Sources) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.sources+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListExpeditionIDSourceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDSourceContext provides the source list id action context.
type ListIDSourceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SourceID int
}

// NewListIDSourceContext parses the incoming request URL and body, performs validations and creates the
// context used by the source controller list id action.
func NewListIDSourceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDSourceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDSourceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSourceID := req.Params["sourceId"]
	if len(paramSourceID) > 0 {
		rawSourceID := paramSourceID[0]
		if sourceID, err2 := strconv.Atoi(rawSourceID); err2 == nil {
			rctx.SourceID = sourceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceId", rawSourceID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDSourceContext) OK(r *DeviceSource) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKPublic sends a HTTP response with status code 200.
func (ctx *ListIDSourceContext) OKPublic(r *DeviceSourcePublic) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.device_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDSourceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// SummaryByIDSourceContext provides the source summary by id action context.
type SummaryByIDSourceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SourceID int
}

// NewSummaryByIDSourceContext parses the incoming request URL and body, performs validations and creates the
// context used by the source controller summary by id action.
func NewSummaryByIDSourceContext(ctx context.Context, r *http.Request, service *goa.Service) (*SummaryByIDSourceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SummaryByIDSourceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSourceID := req.Params["sourceId"]
	if len(paramSourceID) > 0 {
		rawSourceID := paramSourceID[0]
		if sourceID, err2 := strconv.Atoi(rawSourceID); err2 == nil {
			rctx.SourceID = sourceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceId", rawSourceID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SummaryByIDSourceContext) OK(r *SourceSummary) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.source_summary+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SummaryByIDSourceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// TemporalClusterGeometryByIDSourceContext provides the source temporal cluster geometry by id action context.
type TemporalClusterGeometryByIDSourceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClusterID int
	SourceID  int
}

// NewTemporalClusterGeometryByIDSourceContext parses the incoming request URL and body, performs validations and creates the
// context used by the source controller temporal cluster geometry by id action.
func NewTemporalClusterGeometryByIDSourceContext(ctx context.Context, r *http.Request, service *goa.Service) (*TemporalClusterGeometryByIDSourceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := TemporalClusterGeometryByIDSourceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClusterID := req.Params["clusterId"]
	if len(paramClusterID) > 0 {
		rawClusterID := paramClusterID[0]
		if clusterID, err2 := strconv.Atoi(rawClusterID); err2 == nil {
			rctx.ClusterID = clusterID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("clusterId", rawClusterID, "integer"))
		}
	}
	paramSourceID := req.Params["sourceId"]
	if len(paramSourceID) > 0 {
		rawSourceID := paramSourceID[0]
		if sourceID, err2 := strconv.Atoi(rawSourceID); err2 == nil {
			rctx.SourceID = sourceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceId", rawSourceID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *TemporalClusterGeometryByIDSourceContext) OK(r *ClusterGeometrySummary) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.cluster_geometry_summary+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *TemporalClusterGeometryByIDSourceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateSourceContext provides the source update action context.
type UpdateSourceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SourceID int
	Payload  *UpdateSourcePayload
}

// NewUpdateSourceContext parses the incoming request URL and body, performs validations and creates the
// context used by the source controller update action.
func NewUpdateSourceContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateSourceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateSourceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSourceID := req.Params["sourceId"]
	if len(paramSourceID) > 0 {
		rawSourceID := paramSourceID[0]
		if sourceID, err2 := strconv.Atoi(rawSourceID); err2 == nil {
			rctx.SourceID = sourceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceId", rawSourceID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateSourceContext) OK(r *Source) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateSourceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddSourceTokenContext provides the source_token add action context.
type AddSourceTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewAddSourceTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the source_token controller add action.
func NewAddSourceTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddSourceTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddSourceTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddSourceTokenContext) OK(r *SourceToken) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.source_token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddSourceTokenContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteSourceTokenContext provides the source_token delete action context.
type DeleteSourceTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SourceTokenID int
}

// NewDeleteSourceTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the source_token controller delete action.
func NewDeleteSourceTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteSourceTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteSourceTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSourceTokenID := req.Params["sourceTokenId"]
	if len(paramSourceTokenID) > 0 {
		rawSourceTokenID := paramSourceTokenID[0]
		if sourceTokenID, err2 := strconv.Atoi(rawSourceTokenID); err2 == nil {
			rctx.SourceTokenID = sourceTokenID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceTokenId", rawSourceTokenID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteSourceTokenContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteSourceTokenContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListSourceTokenContext provides the source_token list action context.
type ListSourceTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListSourceTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the source_token controller list action.
func NewListSourceTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSourceTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSourceTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSourceTokenContext) OK(r *SourceTokens) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.source_tokens+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListSourceTokenContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDSourceTokenContext provides the source_token list id action context.
type ListIDSourceTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListIDSourceTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the source_token controller list id action.
func NewListIDSourceTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDSourceTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDSourceTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDSourceTokenContext) OK(r *SourceTokens) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.source_tokens+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDSourceTokenContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddStationContext provides the station add action context.
type AddStationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddStationPayload
}

// NewAddStationContext parses the incoming request URL and body, performs validations and creates the
// context used by the station controller add action.
func NewAddStationContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddStationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddStationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddStationContext) OK(r *Station) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.station+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddStationContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetStationContext provides the station get action context.
type GetStationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Station string
}

// NewGetStationContext parses the incoming request URL and body, performs validations and creates the
// context used by the station controller get action.
func NewGetStationContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetStationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetStationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStation := req.Params["station"]
	if len(paramStation) > 0 {
		rawStation := paramStation[0]
		rctx.Station = rawStation
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetStationContext) OK(r *Station) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.station+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetStationContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListStationContext provides the station list action context.
type ListStationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListStationContext parses the incoming request URL and body, performs validations and creates the
// context used by the station controller list action.
func NewListStationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListStationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListStationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListStationContext) OK(r *Stations) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.stations+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListStationContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateStationContext provides the station update action context.
type UpdateStationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	StationID int
	Payload   *AddStationPayload
}

// NewUpdateStationContext parses the incoming request URL and body, performs validations and creates the
// context used by the station controller update action.
func NewUpdateStationContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateStationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateStationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStationID := req.Params["stationId"]
	if len(paramStationID) > 0 {
		rawStationID := paramStationID[0]
		if stationID, err2 := strconv.Atoi(rawStationID); err2 == nil {
			rctx.StationID = stationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationId", rawStationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateStationContext) OK(r *Station) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.station+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateStationContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddStationLogContext provides the stationLog add action context.
type AddStationLogContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddStationLogPayload
}

// NewAddStationLogContext parses the incoming request URL and body, performs validations and creates the
// context used by the stationLog controller add action.
func NewAddStationLogContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddStationLogContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddStationLogContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddStationLogContext) OK(r *StationLog) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.stationlog+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddStationLogContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddMultipleStationLogContext provides the stationLog addMultiple action context.
type AddMultipleStationLogContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddStationLogsPayload
}

// NewAddMultipleStationLogContext parses the incoming request URL and body, performs validations and creates the
// context used by the stationLog controller addMultiple action.
func NewAddMultipleStationLogContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddMultipleStationLogContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddMultipleStationLogContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddMultipleStationLogContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddMultipleStationLogContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetStationLogContext provides the stationLog get action context.
type GetStationLogContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	StationLog string
}

// NewGetStationLogContext parses the incoming request URL and body, performs validations and creates the
// context used by the stationLog controller get action.
func NewGetStationLogContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetStationLogContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetStationLogContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStationLog := req.Params["stationLog"]
	if len(paramStationLog) > 0 {
		rawStationLog := paramStationLog[0]
		rctx.StationLog = rawStationLog
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetStationLogContext) OK(r *StationLog) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.stationlog+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetStationLogContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateStationLogContext provides the stationLog update action context.
type UpdateStationLogContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	StationLogID int
	Payload      *AddStationLogPayload
}

// NewUpdateStationLogContext parses the incoming request URL and body, performs validations and creates the
// context used by the stationLog controller update action.
func NewUpdateStationLogContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateStationLogContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateStationLogContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramStationLogID := req.Params["stationLogId"]
	if len(paramStationLogID) > 0 {
		rawStationLogID := paramStationLogID[0]
		if stationLogID, err2 := strconv.Atoi(rawStationLogID); err2 == nil {
			rctx.StationLogID = stationLogID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("stationLogId", rawStationLogID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateStationLogContext) OK(r *StationLog) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.stationlog+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateStationLogContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddTeamContext provides the team add action context.
type AddTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
	Payload      *AddTeamPayload
}

// NewAddTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller add action.
func NewAddTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddTeamContext) OK(r *Team) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteTeamContext provides the team delete action context.
type DeleteTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
}

// NewDeleteTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller delete action.
func NewDeleteTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["teamId"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("teamId", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteTeamContext) OK(r *Team) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetTeamContext provides the team get action context.
type GetTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
	Team       string
}

// NewGetTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller get action.
func NewGetTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	paramTeam := req.Params["team"]
	if len(paramTeam) > 0 {
		rawTeam := paramTeam[0]
		rctx.Team = rawTeam
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Team); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`team`, rctx.Team, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Team) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`team`, rctx.Team, utf8.RuneCountInString(rctx.Team), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetTeamContext) OK(r *Team) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDTeamContext provides the team get id action context.
type GetIDTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID int
}

// NewGetIDTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller get id action.
func NewGetIDTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["teamId"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("teamId", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDTeamContext) OK(r *Team) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListTeamContext provides the team list action context.
type ListTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller list action.
func NewListTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTeamContext) OK(r *Teams) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.teams+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDTeamContext provides the team list id action context.
type ListIDTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListIDTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller list id action.
func NewListIDTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDTeamContext) OK(r *Teams) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.teams+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateTeamContext provides the team update action context.
type UpdateTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TeamID  int
	Payload *AddTeamPayload
}

// NewUpdateTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the team controller update action.
func NewUpdateTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTeamID := req.Params["teamId"]
	if len(paramTeamID) > 0 {
		rawTeamID := paramTeamID[0]
		if teamID, err2 := strconv.Atoi(rawTeamID); err2 == nil {
			rctx.TeamID = teamID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("teamId", rawTeamID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateTeamContext) OK(r *Team) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.team+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTeamContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddTwitterContext provides the twitter add action context.
type AddTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
	Payload      *AddTwitterAccountSourcePayload
}

// NewAddTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller add action.
func NewAddTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddTwitterContext) OK(r *Location) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.location+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// CallbackTwitterContext provides the twitter callback action context.
type CallbackTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OauthToken    string
	OauthVerifier *string
}

// NewCallbackTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller callback action.
func NewCallbackTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*CallbackTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CallbackTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOauthToken := req.Params["oauthToken"]
	if len(paramOauthToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("oauthToken"))
	} else {
		rawOauthToken := paramOauthToken[0]
		rctx.OauthToken = rawOauthToken
	}
	paramOauthVerifier := req.Params["oauthVerifier"]
	if len(paramOauthVerifier) > 0 {
		rawOauthVerifier := paramOauthVerifier[0]
		rctx.OauthVerifier = &rawOauthVerifier
	}
	return &rctx, err
}

// Found sends a HTTP response with status code 302.
func (ctx *CallbackTwitterContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CallbackTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetIDTwitterContext provides the twitter get id action context.
type GetIDTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SourceID int
}

// NewGetIDTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller get id action.
func NewGetIDTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSourceID := req.Params["sourceId"]
	if len(paramSourceID) > 0 {
		rawSourceID := paramSourceID[0]
		if sourceID, err2 := strconv.Atoi(rawSourceID); err2 == nil {
			rctx.SourceID = sourceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("sourceId", rawSourceID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDTwitterContext) OK(r *TwitterAccountSource) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.twitter_account_source+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetIDTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListTwitterContext provides the twitter list action context.
type ListTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expedition string
	Project    string
}

// NewListTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller list action.
func NewListTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpedition := req.Params["expedition"]
	if len(paramExpedition) > 0 {
		rawExpedition := paramExpedition[0]
		rctx.Expedition = rawExpedition
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Expedition); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`expedition`, rctx.Expedition, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Expedition) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`expedition`, rctx.Expedition, utf8.RuneCountInString(rctx.Expedition), 40, false))
		}
	}
	paramProject := req.Params["project"]
	if len(paramProject) > 0 {
		rawProject := paramProject[0]
		rctx.Project = rawProject
		if ok := goa.ValidatePattern(`^[\da-z]+(?:-[\da-z]+)*$`, rctx.Project); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`project`, rctx.Project, `^[\da-z]+(?:-[\da-z]+)*$`))
		}
		if utf8.RuneCountInString(rctx.Project) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`project`, rctx.Project, utf8.RuneCountInString(rctx.Project), 40, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTwitterContext) OK(r *TwitterAccountSources) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.twitter_account_intputs+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListIDTwitterContext provides the twitter list id action context.
type ListIDTwitterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ExpeditionID int
}

// NewListIDTwitterContext parses the incoming request URL and body, performs validations and creates the
// context used by the twitter controller list id action.
func NewListIDTwitterContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListIDTwitterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListIDTwitterContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpeditionID := req.Params["expeditionId"]
	if len(paramExpeditionID) > 0 {
		rawExpeditionID := paramExpeditionID[0]
		if expeditionID, err2 := strconv.Atoi(rawExpeditionID); err2 == nil {
			rctx.ExpeditionID = expeditionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expeditionId", rawExpeditionID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListIDTwitterContext) OK(r *TwitterAccountSources) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.twitter_account_intputs+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListIDTwitterContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// AddUserContext provides the user add action context.
type AddUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddUserPayload
}

// NewAddUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller add action.
func NewAddUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AddUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// GetCurrentUserContext provides the user get current action context.
type GetCurrentUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetCurrentUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get current action.
func NewGetCurrentUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCurrentUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCurrentUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCurrentUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetIDUserContext provides the user get id action context.
type GetIDUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetIDUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get id action.
func NewGetIDUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetIDUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetIDUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetIDUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListUserContext provides the user list action context.
type ListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list action.
func NewListUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUserContext) OK(r *Users) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.users+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// LoginUserContext provides the user login action context.
type LoginUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LoginPayload
}

// NewLoginUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller login action.
func NewLoginUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LoginUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LoginUserContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// LogoutUserContext provides the user logout action context.
type LogoutUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogoutUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller logout action.
func NewLogoutUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LogoutUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LogoutUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LogoutUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LogoutUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// RefreshUserContext provides the user refresh action context.
type RefreshUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RefreshUserPayload
}

// NewRefreshUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller refresh action.
func NewRefreshUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RefreshUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RefreshUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// refreshUserPayload is the user refresh action payload.
type refreshUserPayload struct {
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" yaml:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *refreshUserPayload) Validate() (err error) {
	if payload.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "refresh_token"))
	}
	return
}

// Publicize creates RefreshUserPayload from refreshUserPayload
func (payload *refreshUserPayload) Publicize() *RefreshUserPayload {
	var pub RefreshUserPayload
	if payload.RefreshToken != nil {
		pub.RefreshToken = *payload.RefreshToken
	}
	return &pub
}

// RefreshUserPayload is the user refresh action payload.
type RefreshUserPayload struct {
	RefreshToken string `form:"refresh_token" json:"refresh_token" yaml:"refresh_token" xml:"refresh_token"`
}

// Validate runs the validation rules defined in the design.
func (payload *RefreshUserPayload) Validate() (err error) {
	if payload.RefreshToken == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "refresh_token"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RefreshUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RefreshUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUserPayload
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userId"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userId", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.app.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ValidateUserContext provides the user validate action context.
type ValidateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Token string
}

// NewValidateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller validate action.
func NewValidateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ValidateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ValidateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramToken := req.Params["token"]
	if len(paramToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("token"))
	} else {
		rawToken := paramToken[0]
		rctx.Token = rawToken
	}
	return &rctx, err
}

// Found sends a HTTP response with status code 302.
func (ctx *ValidateUserContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ValidateUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}
