// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": Application User Types
//
// Command:
// $ main

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// addAdministratorPayload user type.
type addAdministratorPayload struct {
	UserID *int `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the addAdministratorPayload type instance.
func (ut *addAdministratorPayload) Validate() (err error) {
	if ut.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "userId"))
	}
	return
}

// Publicize creates AddAdministratorPayload from addAdministratorPayload
func (ut *addAdministratorPayload) Publicize() *AddAdministratorPayload {
	var pub AddAdministratorPayload
	if ut.UserID != nil {
		pub.UserID = *ut.UserID
	}
	return &pub
}

// AddAdministratorPayload user type.
type AddAdministratorPayload struct {
	UserID int `form:"userId" json:"userId" yaml:"userId" xml:"userId"`
}

// addDeviceSourcePayload user type.
type addDeviceSourcePayload struct {
	Key  *string `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the addDeviceSourcePayload type instance.
func (ut *addDeviceSourcePayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	return
}

// Publicize creates AddDeviceSourcePayload from addDeviceSourcePayload
func (ut *addDeviceSourcePayload) Publicize() *AddDeviceSourcePayload {
	var pub AddDeviceSourcePayload
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// AddDeviceSourcePayload user type.
type AddDeviceSourcePayload struct {
	Key  string `form:"key" json:"key" yaml:"key" xml:"key"`
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the AddDeviceSourcePayload type instance.
func (ut *AddDeviceSourcePayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}
	return
}

// addExpeditionPayload user type.
type addExpeditionPayload struct {
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" yaml:"slug,omitempty" xml:"slug,omitempty"`
}

// Validate validates the addExpeditionPayload type instance.
func (ut *addExpeditionPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "slug"))
	}
	if ut.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "description"))
	}
	if ut.Slug != nil {
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, *ut.Slug); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.slug`, *ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	if ut.Slug != nil {
		if utf8.RuneCountInString(*ut.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.slug`, *ut.Slug, utf8.RuneCountInString(*ut.Slug), 40, false))
		}
	}
	return
}

// Publicize creates AddExpeditionPayload from addExpeditionPayload
func (ut *addExpeditionPayload) Publicize() *AddExpeditionPayload {
	var pub AddExpeditionPayload
	if ut.Description != nil {
		pub.Description = *ut.Description
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Slug != nil {
		pub.Slug = *ut.Slug
	}
	return &pub
}

// AddExpeditionPayload user type.
type AddExpeditionPayload struct {
	Description string `form:"description" json:"description" yaml:"description" xml:"description"`
	Name        string `form:"name" json:"name" yaml:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
}

// Validate validates the AddExpeditionPayload type instance.
func (ut *AddExpeditionPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "slug"))
	}
	if ut.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, ut.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.slug`, ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(ut.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.slug`, ut.Slug, utf8.RuneCountInString(ut.Slug), 40, false))
	}
	return
}

// addFirmwarePayload user type.
type addFirmwarePayload struct {
	Etag    *string `form:"etag,omitempty" json:"etag,omitempty" yaml:"etag,omitempty" xml:"etag,omitempty"`
	Meta    *string `form:"meta,omitempty" json:"meta,omitempty" yaml:"meta,omitempty" xml:"meta,omitempty"`
	Module  *string `form:"module,omitempty" json:"module,omitempty" yaml:"module,omitempty" xml:"module,omitempty"`
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" yaml:"profile,omitempty" xml:"profile,omitempty"`
	URL     *string `form:"url,omitempty" json:"url,omitempty" yaml:"url,omitempty" xml:"url,omitempty"`
}

// Validate validates the addFirmwarePayload type instance.
func (ut *addFirmwarePayload) Validate() (err error) {
	if ut.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "etag"))
	}
	if ut.Module == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "module"))
	}
	if ut.Profile == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "profile"))
	}
	if ut.URL == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "url"))
	}
	if ut.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "meta"))
	}
	return
}

// Publicize creates AddFirmwarePayload from addFirmwarePayload
func (ut *addFirmwarePayload) Publicize() *AddFirmwarePayload {
	var pub AddFirmwarePayload
	if ut.Etag != nil {
		pub.Etag = *ut.Etag
	}
	if ut.Meta != nil {
		pub.Meta = *ut.Meta
	}
	if ut.Module != nil {
		pub.Module = *ut.Module
	}
	if ut.Profile != nil {
		pub.Profile = *ut.Profile
	}
	if ut.URL != nil {
		pub.URL = *ut.URL
	}
	return &pub
}

// AddFirmwarePayload user type.
type AddFirmwarePayload struct {
	Etag    string `form:"etag" json:"etag" yaml:"etag" xml:"etag"`
	Meta    string `form:"meta" json:"meta" yaml:"meta" xml:"meta"`
	Module  string `form:"module" json:"module" yaml:"module" xml:"module"`
	Profile string `form:"profile" json:"profile" yaml:"profile" xml:"profile"`
	URL     string `form:"url" json:"url" yaml:"url" xml:"url"`
}

// Validate validates the AddFirmwarePayload type instance.
func (ut *AddFirmwarePayload) Validate() (err error) {
	if ut.Etag == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "etag"))
	}
	if ut.Module == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "module"))
	}
	if ut.Profile == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "profile"))
	}
	if ut.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "url"))
	}
	if ut.Meta == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "meta"))
	}
	return
}

// addMemberPayload user type.
type addMemberPayload struct {
	Role   *string `form:"role,omitempty" json:"role,omitempty" yaml:"role,omitempty" xml:"role,omitempty"`
	UserID *int    `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the addMemberPayload type instance.
func (ut *addMemberPayload) Validate() (err error) {
	if ut.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "userId"))
	}
	if ut.Role == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "role"))
	}
	return
}

// Publicize creates AddMemberPayload from addMemberPayload
func (ut *addMemberPayload) Publicize() *AddMemberPayload {
	var pub AddMemberPayload
	if ut.Role != nil {
		pub.Role = *ut.Role
	}
	if ut.UserID != nil {
		pub.UserID = *ut.UserID
	}
	return &pub
}

// AddMemberPayload user type.
type AddMemberPayload struct {
	Role   string `form:"role" json:"role" yaml:"role" xml:"role"`
	UserID int    `form:"userId" json:"userId" yaml:"userId" xml:"userId"`
}

// Validate validates the AddMemberPayload type instance.
func (ut *AddMemberPayload) Validate() (err error) {

	if ut.Role == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "role"))
	}
	return
}

// addProjectPayload user type.
type addProjectPayload struct {
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" yaml:"slug,omitempty" xml:"slug,omitempty"`
}

// Validate validates the addProjectPayload type instance.
func (ut *addProjectPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "slug"))
	}
	if ut.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "description"))
	}
	if ut.Slug != nil {
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, *ut.Slug); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.slug`, *ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	if ut.Slug != nil {
		if utf8.RuneCountInString(*ut.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.slug`, *ut.Slug, utf8.RuneCountInString(*ut.Slug), 40, false))
		}
	}
	return
}

// Publicize creates AddProjectPayload from addProjectPayload
func (ut *addProjectPayload) Publicize() *AddProjectPayload {
	var pub AddProjectPayload
	if ut.Description != nil {
		pub.Description = *ut.Description
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Slug != nil {
		pub.Slug = *ut.Slug
	}
	return &pub
}

// AddProjectPayload user type.
type AddProjectPayload struct {
	Description string `form:"description" json:"description" yaml:"description" xml:"description"`
	Name        string `form:"name" json:"name" yaml:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
}

// Validate validates the AddProjectPayload type instance.
func (ut *AddProjectPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "slug"))
	}
	if ut.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "description"))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, ut.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.slug`, ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(ut.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.slug`, ut.Slug, utf8.RuneCountInString(ut.Slug), 40, false))
	}
	return
}

// addStationLogPayload user type.
type addStationLogPayload struct {
	ID        *int    `form:"ID,omitempty" json:"ID,omitempty" yaml:"ID,omitempty" xml:"ID,omitempty"`
	Body      *string `form:"body,omitempty" json:"body,omitempty" yaml:"body,omitempty" xml:"body,omitempty"`
	StationID *int    `form:"station_id,omitempty" json:"station_id,omitempty" yaml:"station_id,omitempty" xml:"station_id,omitempty"`
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" yaml:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// Validate validates the addStationLogPayload type instance.
func (ut *addStationLogPayload) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "ID"))
	}
	if ut.StationID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "station_id"))
	}
	if ut.Body == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "body"))
	}
	if ut.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "timestamp"))
	}
	return
}

// Publicize creates AddStationLogPayload from addStationLogPayload
func (ut *addStationLogPayload) Publicize() *AddStationLogPayload {
	var pub AddStationLogPayload
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Body != nil {
		pub.Body = *ut.Body
	}
	if ut.StationID != nil {
		pub.StationID = *ut.StationID
	}
	if ut.Timestamp != nil {
		pub.Timestamp = *ut.Timestamp
	}
	return &pub
}

// AddStationLogPayload user type.
type AddStationLogPayload struct {
	ID        int    `form:"ID" json:"ID" yaml:"ID" xml:"ID"`
	Body      string `form:"body" json:"body" yaml:"body" xml:"body"`
	StationID int    `form:"station_id" json:"station_id" yaml:"station_id" xml:"station_id"`
	Timestamp string `form:"timestamp" json:"timestamp" yaml:"timestamp" xml:"timestamp"`
}

// Validate validates the AddStationLogPayload type instance.
func (ut *AddStationLogPayload) Validate() (err error) {

	if ut.Body == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "body"))
	}
	if ut.Timestamp == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "timestamp"))
	}
	return
}

// addStationLogsPayload user type.
type addStationLogsPayload struct {
	StationLogs []*addStationLogPayload `form:"station_logs,omitempty" json:"station_logs,omitempty" yaml:"station_logs,omitempty" xml:"station_logs,omitempty"`
}

// Validate validates the addStationLogsPayload type instance.
func (ut *addStationLogsPayload) Validate() (err error) {
	if ut.StationLogs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "station_logs"))
	}
	for _, e := range ut.StationLogs {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates AddStationLogsPayload from addStationLogsPayload
func (ut *addStationLogsPayload) Publicize() *AddStationLogsPayload {
	var pub AddStationLogsPayload
	if ut.StationLogs != nil {
		pub.StationLogs = make([]*AddStationLogPayload, len(ut.StationLogs))
		for i2, elem2 := range ut.StationLogs {
			pub.StationLogs[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// AddStationLogsPayload user type.
type AddStationLogsPayload struct {
	StationLogs []*AddStationLogPayload `form:"station_logs" json:"station_logs" yaml:"station_logs" xml:"station_logs"`
}

// Validate validates the AddStationLogsPayload type instance.
func (ut *AddStationLogsPayload) Validate() (err error) {
	if ut.StationLogs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "station_logs"))
	}
	for _, e := range ut.StationLogs {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// addStationPayload user type.
type addStationPayload struct {
	Name   *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	UserID *int    `form:"user_id,omitempty" json:"user_id,omitempty" yaml:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate validates the addStationPayload type instance.
func (ut *addStationPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "user_id"))
	}
	return
}

// Publicize creates AddStationPayload from addStationPayload
func (ut *addStationPayload) Publicize() *AddStationPayload {
	var pub AddStationPayload
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.UserID != nil {
		pub.UserID = *ut.UserID
	}
	return &pub
}

// AddStationPayload user type.
type AddStationPayload struct {
	Name   string `form:"name" json:"name" yaml:"name" xml:"name"`
	UserID int    `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate validates the AddStationPayload type instance.
func (ut *AddStationPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}

	return
}

// addTeamPayload user type.
type addTeamPayload struct {
	Description *string `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" yaml:"slug,omitempty" xml:"slug,omitempty"`
}

// Validate validates the addTeamPayload type instance.
func (ut *addTeamPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "slug"))
	}
	if ut.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "description"))
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`\S`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `\S`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 256, false))
		}
	}
	if ut.Slug != nil {
		if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, *ut.Slug); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.slug`, *ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
		}
	}
	if ut.Slug != nil {
		if utf8.RuneCountInString(*ut.Slug) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.slug`, *ut.Slug, utf8.RuneCountInString(*ut.Slug), 40, false))
		}
	}
	return
}

// Publicize creates AddTeamPayload from addTeamPayload
func (ut *addTeamPayload) Publicize() *AddTeamPayload {
	var pub AddTeamPayload
	if ut.Description != nil {
		pub.Description = *ut.Description
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Slug != nil {
		pub.Slug = *ut.Slug
	}
	return &pub
}

// AddTeamPayload user type.
type AddTeamPayload struct {
	Description string `form:"description" json:"description" yaml:"description" xml:"description"`
	Name        string `form:"name" json:"name" yaml:"name" xml:"name"`
	Slug        string `form:"slug" json:"slug" yaml:"slug" xml:"slug"`
}

// Validate validates the AddTeamPayload type instance.
func (ut *AddTeamPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Slug == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "slug"))
	}
	if ut.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "description"))
	}
	if ok := goa.ValidatePattern(`\S`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `\S`))
	}
	if utf8.RuneCountInString(ut.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 256, false))
	}
	if ok := goa.ValidatePattern(`^[[:alnum:]]+(-[[:alnum:]]+)*$`, ut.Slug); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.slug`, ut.Slug, `^[[:alnum:]]+(-[[:alnum:]]+)*$`))
	}
	if utf8.RuneCountInString(ut.Slug) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.slug`, ut.Slug, utf8.RuneCountInString(ut.Slug), 40, false))
	}
	return
}

// addTwitterAccountSourcePayload user type.
type addTwitterAccountSourcePayload struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the addTwitterAccountSourcePayload type instance.
func (ut *addTwitterAccountSourcePayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	return
}

// Publicize creates AddTwitterAccountSourcePayload from addTwitterAccountSourcePayload
func (ut *addTwitterAccountSourcePayload) Publicize() *AddTwitterAccountSourcePayload {
	var pub AddTwitterAccountSourcePayload
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// AddTwitterAccountSourcePayload user type.
type AddTwitterAccountSourcePayload struct {
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the AddTwitterAccountSourcePayload type instance.
func (ut *AddTwitterAccountSourcePayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	return
}

// addUserPayload user type.
type addUserPayload struct {
	Email       *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	InviteToken *string `form:"invite_token,omitempty" json:"invite_token,omitempty" yaml:"invite_token,omitempty" xml:"invite_token,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Password    *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the addUserPayload type instance.
func (ut *addUserPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`\S`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `\S`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 256, false))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 10, true))
		}
	}
	return
}

// Publicize creates AddUserPayload from addUserPayload
func (ut *addUserPayload) Publicize() *AddUserPayload {
	var pub AddUserPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.InviteToken != nil {
		pub.InviteToken = ut.InviteToken
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// AddUserPayload user type.
type AddUserPayload struct {
	Email       string  `form:"email" json:"email" yaml:"email" xml:"email"`
	InviteToken *string `form:"invite_token,omitempty" json:"invite_token,omitempty" yaml:"invite_token,omitempty" xml:"invite_token,omitempty"`
	Name        string  `form:"name" json:"name" yaml:"name" xml:"name"`
	Password    string  `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the AddUserPayload type instance.
func (ut *AddUserPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`\S`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `\S`))
	}
	if utf8.RuneCountInString(ut.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 256, false))
	}
	if utf8.RuneCountInString(ut.Password) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 10, true))
	}
	return
}

// concatenatedFileInfo user type.
type concatenatedFileInfo struct {
	Csv  *string    `form:"csv,omitempty" json:"csv,omitempty" yaml:"csv,omitempty" xml:"csv,omitempty"`
	Size *int       `form:"size,omitempty" json:"size,omitempty" yaml:"size,omitempty" xml:"size,omitempty"`
	Time *time.Time `form:"time,omitempty" json:"time,omitempty" yaml:"time,omitempty" xml:"time,omitempty"`
}

// Validate validates the concatenatedFileInfo type instance.
func (ut *concatenatedFileInfo) Validate() (err error) {
	if ut.Time == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "time"))
	}
	if ut.Size == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "size"))
	}
	if ut.Csv == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "csv"))
	}
	return
}

// Publicize creates ConcatenatedFileInfo from concatenatedFileInfo
func (ut *concatenatedFileInfo) Publicize() *ConcatenatedFileInfo {
	var pub ConcatenatedFileInfo
	if ut.Csv != nil {
		pub.Csv = *ut.Csv
	}
	if ut.Size != nil {
		pub.Size = *ut.Size
	}
	if ut.Time != nil {
		pub.Time = *ut.Time
	}
	return &pub
}

// ConcatenatedFileInfo user type.
type ConcatenatedFileInfo struct {
	Csv  string    `form:"csv" json:"csv" yaml:"csv" xml:"csv"`
	Size int       `form:"size" json:"size" yaml:"size" xml:"size"`
	Time time.Time `form:"time" json:"time" yaml:"time" xml:"time"`
}

// Validate validates the ConcatenatedFileInfo type instance.
func (ut *ConcatenatedFileInfo) Validate() (err error) {

	if ut.Csv == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "csv"))
	}
	return
}

// concatenatedFilesInfo user type.
type concatenatedFilesInfo struct {
	Data *concatenatedFileInfo `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Logs *concatenatedFileInfo `form:"logs,omitempty" json:"logs,omitempty" yaml:"logs,omitempty" xml:"logs,omitempty"`
}

// Validate validates the concatenatedFilesInfo type instance.
func (ut *concatenatedFilesInfo) Validate() (err error) {
	if ut.Logs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "logs"))
	}
	if ut.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "data"))
	}
	if ut.Data != nil {
		if err2 := ut.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Logs != nil {
		if err2 := ut.Logs.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates ConcatenatedFilesInfo from concatenatedFilesInfo
func (ut *concatenatedFilesInfo) Publicize() *ConcatenatedFilesInfo {
	var pub ConcatenatedFilesInfo
	if ut.Data != nil {
		pub.Data = ut.Data.Publicize()
	}
	if ut.Logs != nil {
		pub.Logs = ut.Logs.Publicize()
	}
	return &pub
}

// ConcatenatedFilesInfo user type.
type ConcatenatedFilesInfo struct {
	Data *ConcatenatedFileInfo `form:"data" json:"data" yaml:"data" xml:"data"`
	Logs *ConcatenatedFileInfo `form:"logs" json:"logs" yaml:"logs" xml:"logs"`
}

// Validate validates the ConcatenatedFilesInfo type instance.
func (ut *ConcatenatedFilesInfo) Validate() (err error) {
	if ut.Logs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "logs"))
	}
	if ut.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "data"))
	}
	if ut.Data != nil {
		if err2 := ut.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Logs != nil {
		if err2 := ut.Logs.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// deviceFileTypeUrls user type.
type deviceFileTypeUrls struct {
	Csv      *string `form:"csv,omitempty" json:"csv,omitempty" yaml:"csv,omitempty" xml:"csv,omitempty"`
	Fkpb     *string `form:"fkpb,omitempty" json:"fkpb,omitempty" yaml:"fkpb,omitempty" xml:"fkpb,omitempty"`
	Generate *string `form:"generate,omitempty" json:"generate,omitempty" yaml:"generate,omitempty" xml:"generate,omitempty"`
	ID       *string `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	Info     *string `form:"info,omitempty" json:"info,omitempty" yaml:"info,omitempty" xml:"info,omitempty"`
}

// Validate validates the deviceFileTypeUrls type instance.
func (ut *deviceFileTypeUrls) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "id"))
	}
	if ut.Generate == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "generate"))
	}
	if ut.Info == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "info"))
	}
	if ut.Csv == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "csv"))
	}
	if ut.Fkpb == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "fkpb"))
	}
	return
}

// Publicize creates DeviceFileTypeUrls from deviceFileTypeUrls
func (ut *deviceFileTypeUrls) Publicize() *DeviceFileTypeUrls {
	var pub DeviceFileTypeUrls
	if ut.Csv != nil {
		pub.Csv = *ut.Csv
	}
	if ut.Fkpb != nil {
		pub.Fkpb = *ut.Fkpb
	}
	if ut.Generate != nil {
		pub.Generate = *ut.Generate
	}
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Info != nil {
		pub.Info = *ut.Info
	}
	return &pub
}

// DeviceFileTypeUrls user type.
type DeviceFileTypeUrls struct {
	Csv      string `form:"csv" json:"csv" yaml:"csv" xml:"csv"`
	Fkpb     string `form:"fkpb" json:"fkpb" yaml:"fkpb" xml:"fkpb"`
	Generate string `form:"generate" json:"generate" yaml:"generate" xml:"generate"`
	ID       string `form:"id" json:"id" yaml:"id" xml:"id"`
	Info     string `form:"info" json:"info" yaml:"info" xml:"info"`
}

// Validate validates the DeviceFileTypeUrls type instance.
func (ut *DeviceFileTypeUrls) Validate() (err error) {
	if ut.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "id"))
	}
	if ut.Generate == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "generate"))
	}
	if ut.Info == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "info"))
	}
	if ut.Csv == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "csv"))
	}
	if ut.Fkpb == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "fkpb"))
	}
	return
}

// deviceFileUrls user type.
type deviceFileUrls struct {
	Csv  *string `form:"csv,omitempty" json:"csv,omitempty" yaml:"csv,omitempty" xml:"csv,omitempty"`
	Fkpb *string `form:"fkpb,omitempty" json:"fkpb,omitempty" yaml:"fkpb,omitempty" xml:"fkpb,omitempty"`
}

// Validate validates the deviceFileUrls type instance.
func (ut *deviceFileUrls) Validate() (err error) {
	if ut.Csv == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "csv"))
	}
	if ut.Fkpb == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "fkpb"))
	}
	return
}

// Publicize creates DeviceFileUrls from deviceFileUrls
func (ut *deviceFileUrls) Publicize() *DeviceFileUrls {
	var pub DeviceFileUrls
	if ut.Csv != nil {
		pub.Csv = *ut.Csv
	}
	if ut.Fkpb != nil {
		pub.Fkpb = *ut.Fkpb
	}
	return &pub
}

// DeviceFileUrls user type.
type DeviceFileUrls struct {
	Csv  string `form:"csv" json:"csv" yaml:"csv" xml:"csv"`
	Fkpb string `form:"fkpb" json:"fkpb" yaml:"fkpb" xml:"fkpb"`
}

// Validate validates the DeviceFileUrls type instance.
func (ut *DeviceFileUrls) Validate() (err error) {
	if ut.Csv == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "csv"))
	}
	if ut.Fkpb == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "fkpb"))
	}
	return
}

// deviceSummaryUrls user type.
type deviceSummaryUrls struct {
	Data    *deviceFileTypeUrls `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
	Details *string             `form:"details,omitempty" json:"details,omitempty" yaml:"details,omitempty" xml:"details,omitempty"`
	Logs    *deviceFileTypeUrls `form:"logs,omitempty" json:"logs,omitempty" yaml:"logs,omitempty" xml:"logs,omitempty"`
}

// Validate validates the deviceSummaryUrls type instance.
func (ut *deviceSummaryUrls) Validate() (err error) {
	if ut.Details == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "details"))
	}
	if ut.Logs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "logs"))
	}
	if ut.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "data"))
	}
	if ut.Data != nil {
		if err2 := ut.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Logs != nil {
		if err2 := ut.Logs.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates DeviceSummaryUrls from deviceSummaryUrls
func (ut *deviceSummaryUrls) Publicize() *DeviceSummaryUrls {
	var pub DeviceSummaryUrls
	if ut.Data != nil {
		pub.Data = ut.Data.Publicize()
	}
	if ut.Details != nil {
		pub.Details = *ut.Details
	}
	if ut.Logs != nil {
		pub.Logs = ut.Logs.Publicize()
	}
	return &pub
}

// DeviceSummaryUrls user type.
type DeviceSummaryUrls struct {
	Data    *DeviceFileTypeUrls `form:"data" json:"data" yaml:"data" xml:"data"`
	Details string              `form:"details" json:"details" yaml:"details" xml:"details"`
	Logs    *DeviceFileTypeUrls `form:"logs" json:"logs" yaml:"logs" xml:"logs"`
}

// Validate validates the DeviceSummaryUrls type instance.
func (ut *DeviceSummaryUrls) Validate() (err error) {
	if ut.Details == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "details"))
	}
	if ut.Logs == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "logs"))
	}
	if ut.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "data"))
	}
	if ut.Data != nil {
		if err2 := ut.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.Logs != nil {
		if err2 := ut.Logs.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// loginPayload user type.
type loginPayload struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the loginPayload type instance.
func (ut *loginPayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 10, true))
		}
	}
	return
}

// Publicize creates LoginPayload from loginPayload
func (ut *loginPayload) Publicize() *LoginPayload {
	var pub LoginPayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// LoginPayload user type.
type LoginPayload struct {
	Email    string `form:"email" json:"email" yaml:"email" xml:"email"`
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the LoginPayload type instance.
func (ut *LoginPayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.Password) < 10 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 10, true))
	}
	return
}

// myDataUrls user type.
type myDataUrls struct {
	Csv  *string `form:"csv,omitempty" json:"csv,omitempty" yaml:"csv,omitempty" xml:"csv,omitempty"`
	Fkpb *string `form:"fkpb,omitempty" json:"fkpb,omitempty" yaml:"fkpb,omitempty" xml:"fkpb,omitempty"`
}

// Validate validates the myDataUrls type instance.
func (ut *myDataUrls) Validate() (err error) {
	if ut.Csv == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "csv"))
	}
	if ut.Fkpb == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "fkpb"))
	}
	return
}

// Publicize creates MyDataUrls from myDataUrls
func (ut *myDataUrls) Publicize() *MyDataUrls {
	var pub MyDataUrls
	if ut.Csv != nil {
		pub.Csv = *ut.Csv
	}
	if ut.Fkpb != nil {
		pub.Fkpb = *ut.Fkpb
	}
	return &pub
}

// MyDataUrls user type.
type MyDataUrls struct {
	Csv  string `form:"csv" json:"csv" yaml:"csv" xml:"csv"`
	Fkpb string `form:"fkpb" json:"fkpb" yaml:"fkpb" xml:"fkpb"`
}

// Validate validates the MyDataUrls type instance.
func (ut *MyDataUrls) Validate() (err error) {
	if ut.Csv == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "csv"))
	}
	if ut.Fkpb == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "fkpb"))
	}
	return
}

// updateDeviceFirmwarePayload user type.
type updateDeviceFirmwarePayload struct {
	DeviceID   *int `form:"deviceId,omitempty" json:"deviceId,omitempty" yaml:"deviceId,omitempty" xml:"deviceId,omitempty"`
	FirmwareID *int `form:"firmwareId,omitempty" json:"firmwareId,omitempty" yaml:"firmwareId,omitempty" xml:"firmwareId,omitempty"`
}

// Validate validates the updateDeviceFirmwarePayload type instance.
func (ut *updateDeviceFirmwarePayload) Validate() (err error) {
	if ut.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "deviceId"))
	}
	if ut.FirmwareID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "firmwareId"))
	}
	return
}

// Publicize creates UpdateDeviceFirmwarePayload from updateDeviceFirmwarePayload
func (ut *updateDeviceFirmwarePayload) Publicize() *UpdateDeviceFirmwarePayload {
	var pub UpdateDeviceFirmwarePayload
	if ut.DeviceID != nil {
		pub.DeviceID = *ut.DeviceID
	}
	if ut.FirmwareID != nil {
		pub.FirmwareID = *ut.FirmwareID
	}
	return &pub
}

// UpdateDeviceFirmwarePayload user type.
type UpdateDeviceFirmwarePayload struct {
	DeviceID   int `form:"deviceId" json:"deviceId" yaml:"deviceId" xml:"deviceId"`
	FirmwareID int `form:"firmwareId" json:"firmwareId" yaml:"firmwareId" xml:"firmwareId"`
}

// Validate validates the UpdateDeviceFirmwarePayload type instance.
func (ut *UpdateDeviceFirmwarePayload) Validate() (err error) {

	return
}

// updateDeviceInfoPayload user type.
type updateDeviceInfoPayload struct {
	DeviceID *string `form:"deviceId,omitempty" json:"deviceId,omitempty" yaml:"deviceId,omitempty" xml:"deviceId,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Notes    *string `form:"notes,omitempty" json:"notes,omitempty" yaml:"notes,omitempty" xml:"notes,omitempty"`
}

// Validate validates the updateDeviceInfoPayload type instance.
func (ut *updateDeviceInfoPayload) Validate() (err error) {
	if ut.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "deviceId"))
	}
	return
}

// Publicize creates UpdateDeviceInfoPayload from updateDeviceInfoPayload
func (ut *updateDeviceInfoPayload) Publicize() *UpdateDeviceInfoPayload {
	var pub UpdateDeviceInfoPayload
	if ut.DeviceID != nil {
		pub.DeviceID = *ut.DeviceID
	}
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	if ut.Notes != nil {
		pub.Notes = ut.Notes
	}
	return &pub
}

// UpdateDeviceInfoPayload user type.
type UpdateDeviceInfoPayload struct {
	DeviceID string  `form:"deviceId" json:"deviceId" yaml:"deviceId" xml:"deviceId"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	Notes    *string `form:"notes,omitempty" json:"notes,omitempty" yaml:"notes,omitempty" xml:"notes,omitempty"`
}

// Validate validates the UpdateDeviceInfoPayload type instance.
func (ut *UpdateDeviceInfoPayload) Validate() (err error) {
	if ut.DeviceID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "deviceId"))
	}
	return
}

// updateDeviceSourceLocationPayload user type.
type updateDeviceSourceLocationPayload struct {
	Key       *string  `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	Latitude  *float64 `form:"latitude,omitempty" json:"latitude,omitempty" yaml:"latitude,omitempty" xml:"latitude,omitempty"`
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" yaml:"longitude,omitempty" xml:"longitude,omitempty"`
}

// Validate validates the updateDeviceSourceLocationPayload type instance.
func (ut *updateDeviceSourceLocationPayload) Validate() (err error) {
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	if ut.Longitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "longitude"))
	}
	if ut.Latitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "latitude"))
	}
	return
}

// Publicize creates UpdateDeviceSourceLocationPayload from updateDeviceSourceLocationPayload
func (ut *updateDeviceSourceLocationPayload) Publicize() *UpdateDeviceSourceLocationPayload {
	var pub UpdateDeviceSourceLocationPayload
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	if ut.Latitude != nil {
		pub.Latitude = *ut.Latitude
	}
	if ut.Longitude != nil {
		pub.Longitude = *ut.Longitude
	}
	return &pub
}

// UpdateDeviceSourceLocationPayload user type.
type UpdateDeviceSourceLocationPayload struct {
	Key       string  `form:"key" json:"key" yaml:"key" xml:"key"`
	Latitude  float64 `form:"latitude" json:"latitude" yaml:"latitude" xml:"latitude"`
	Longitude float64 `form:"longitude" json:"longitude" yaml:"longitude" xml:"longitude"`
}

// Validate validates the UpdateDeviceSourceLocationPayload type instance.
func (ut *UpdateDeviceSourceLocationPayload) Validate() (err error) {
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}

	return
}

// updateDeviceSourcePayload user type.
type updateDeviceSourcePayload struct {
	Key  *string `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the updateDeviceSourcePayload type instance.
func (ut *updateDeviceSourcePayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	return
}

// Publicize creates UpdateDeviceSourcePayload from updateDeviceSourcePayload
func (ut *updateDeviceSourcePayload) Publicize() *UpdateDeviceSourcePayload {
	var pub UpdateDeviceSourcePayload
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// UpdateDeviceSourcePayload user type.
type UpdateDeviceSourcePayload struct {
	Key  string `form:"key" json:"key" yaml:"key" xml:"key"`
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the UpdateDeviceSourcePayload type instance.
func (ut *UpdateDeviceSourcePayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}
	return
}

// updateDeviceSourceSchemaPayload user type.
type updateDeviceSourceSchemaPayload struct {
	Active     *bool   `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	JSONSchema *string `form:"jsonSchema,omitempty" json:"jsonSchema,omitempty" yaml:"jsonSchema,omitempty" xml:"jsonSchema,omitempty"`
	Key        *string `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
}

// Validate validates the updateDeviceSourceSchemaPayload type instance.
func (ut *updateDeviceSourceSchemaPayload) Validate() (err error) {
	if ut.Key == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "key"))
	}
	if ut.Active == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "active"))
	}
	if ut.JSONSchema == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "jsonSchema"))
	}
	return
}

// Publicize creates UpdateDeviceSourceSchemaPayload from updateDeviceSourceSchemaPayload
func (ut *updateDeviceSourceSchemaPayload) Publicize() *UpdateDeviceSourceSchemaPayload {
	var pub UpdateDeviceSourceSchemaPayload
	if ut.Active != nil {
		pub.Active = *ut.Active
	}
	if ut.JSONSchema != nil {
		pub.JSONSchema = *ut.JSONSchema
	}
	if ut.Key != nil {
		pub.Key = *ut.Key
	}
	return &pub
}

// UpdateDeviceSourceSchemaPayload user type.
type UpdateDeviceSourceSchemaPayload struct {
	Active     bool   `form:"active" json:"active" yaml:"active" xml:"active"`
	JSONSchema string `form:"jsonSchema" json:"jsonSchema" yaml:"jsonSchema" xml:"jsonSchema"`
	Key        string `form:"key" json:"key" yaml:"key" xml:"key"`
}

// Validate validates the UpdateDeviceSourceSchemaPayload type instance.
func (ut *UpdateDeviceSourceSchemaPayload) Validate() (err error) {
	if ut.Key == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "key"))
	}

	if ut.JSONSchema == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "jsonSchema"))
	}
	return
}

// updateMemberPayload user type.
type updateMemberPayload struct {
	Role *string `form:"role,omitempty" json:"role,omitempty" yaml:"role,omitempty" xml:"role,omitempty"`
}

// Validate validates the updateMemberPayload type instance.
func (ut *updateMemberPayload) Validate() (err error) {
	if ut.Role == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "role"))
	}
	return
}

// Publicize creates UpdateMemberPayload from updateMemberPayload
func (ut *updateMemberPayload) Publicize() *UpdateMemberPayload {
	var pub UpdateMemberPayload
	if ut.Role != nil {
		pub.Role = *ut.Role
	}
	return &pub
}

// UpdateMemberPayload user type.
type UpdateMemberPayload struct {
	Role string `form:"role" json:"role" yaml:"role" xml:"role"`
}

// Validate validates the UpdateMemberPayload type instance.
func (ut *UpdateMemberPayload) Validate() (err error) {
	if ut.Role == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "role"))
	}
	return
}

// updateSourcePayload user type.
type updateSourcePayload struct {
	Active *bool   `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	Name   *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	TeamID *int    `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID *int    `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the updateSourcePayload type instance.
func (ut *updateSourcePayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	return
}

// Publicize creates UpdateSourcePayload from updateSourcePayload
func (ut *updateSourcePayload) Publicize() *UpdateSourcePayload {
	var pub UpdateSourcePayload
	if ut.Active != nil {
		pub.Active = ut.Active
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.TeamID != nil {
		pub.TeamID = ut.TeamID
	}
	if ut.UserID != nil {
		pub.UserID = ut.UserID
	}
	return &pub
}

// UpdateSourcePayload user type.
type UpdateSourcePayload struct {
	Active *bool  `form:"active,omitempty" json:"active,omitempty" yaml:"active,omitempty" xml:"active,omitempty"`
	Name   string `form:"name" json:"name" yaml:"name" xml:"name"`
	TeamID *int   `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID *int   `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Validate validates the UpdateSourcePayload type instance.
func (ut *UpdateSourcePayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	return
}

// updateTwitterAccountSourcePayload user type.
type updateTwitterAccountSourcePayload struct {
	Name   *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	TeamID *int    `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID *int    `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// Publicize creates UpdateTwitterAccountSourcePayload from updateTwitterAccountSourcePayload
func (ut *updateTwitterAccountSourcePayload) Publicize() *UpdateTwitterAccountSourcePayload {
	var pub UpdateTwitterAccountSourcePayload
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	if ut.TeamID != nil {
		pub.TeamID = ut.TeamID
	}
	if ut.UserID != nil {
		pub.UserID = ut.UserID
	}
	return &pub
}

// UpdateTwitterAccountSourcePayload user type.
type UpdateTwitterAccountSourcePayload struct {
	Name   *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	TeamID *int    `form:"teamId,omitempty" json:"teamId,omitempty" yaml:"teamId,omitempty" xml:"teamId,omitempty"`
	UserID *int    `form:"userId,omitempty" json:"userId,omitempty" yaml:"userId,omitempty" xml:"userId,omitempty"`
}

// updateUserPayload user type.
type updateUserPayload struct {
	Bio   *string `form:"bio,omitempty" json:"bio,omitempty" yaml:"bio,omitempty" xml:"bio,omitempty"`
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the updateUserPayload type instance.
func (ut *updateUserPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Bio == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "bio"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`\S`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.name`, *ut.Name, `\S`))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 256, false))
		}
	}
	return
}

// Publicize creates UpdateUserPayload from updateUserPayload
func (ut *updateUserPayload) Publicize() *UpdateUserPayload {
	var pub UpdateUserPayload
	if ut.Bio != nil {
		pub.Bio = *ut.Bio
	}
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// UpdateUserPayload user type.
type UpdateUserPayload struct {
	Bio   string `form:"bio" json:"bio" yaml:"bio" xml:"bio"`
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	Name  string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the UpdateUserPayload type instance.
func (ut *UpdateUserPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Bio == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "bio"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if ok := goa.ValidatePattern(`\S`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.name`, ut.Name, `\S`))
	}
	if utf8.RuneCountInString(ut.Name) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, ut.Name, utf8.RuneCountInString(ut.Name), 256, false))
	}
	return
}
