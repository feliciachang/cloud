// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "fieldkit": stationlog Resource Client
//
// Command:
// $ main

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddStationlogPath computes a request path to the add action of stationlog.
func AddStationlogPath() string {

	return fmt.Sprintf("/stationlogs")
}

// Add a station log
func (c *Client) AddStationlog(ctx context.Context, path string, payload *AddStationLogPayload) (*http.Response, error) {
	req, err := c.NewAddStationlogRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddStationlogRequest create the request corresponding to the add action endpoint of the stationlog resource.
func (c *Client) NewAddStationlogRequest(ctx context.Context, path string, payload *AddStationLogPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetStationlogPath computes a request path to the get action of stationlog.
func GetStationlogPath(stationlog string) string {
	param0 := stationlog

	return fmt.Sprintf("/stationlogs/@/%s", param0)
}

// Get a station log
func (c *Client) GetStationlog(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetStationlogRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetStationlogRequest create the request corresponding to the get action endpoint of the stationlog resource.
func (c *Client) NewGetStationlogRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateStationlogPath computes a request path to the update action of stationlog.
func UpdateStationlogPath(stationlogID int) string {
	param0 := strconv.Itoa(stationlogID)

	return fmt.Sprintf("/stationlogs/%s", param0)
}

// Update a station log
func (c *Client) UpdateStationlog(ctx context.Context, path string, payload *AddStationLogPayload) (*http.Response, error) {
	req, err := c.NewUpdateStationlogRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateStationlogRequest create the request corresponding to the update action endpoint of the stationlog resource.
func (c *Client) NewUpdateStationlogRequest(ctx context.Context, path string, payload *AddStationLogPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
